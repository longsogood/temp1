import streamlit as st
import pandas as pd
import requests
import time
import datetime
import os
import pickle
import schedule
import threading
from uuid import uuid4
import concurrent.futures
import logging
from utils import extract_section
import warnings
import pytz
from schedule_manager import get_schedule_manager
warnings.filterwarnings("ignore")

## C·∫•u h√¨nh streamlit
st.set_page_config(
    layout="wide",
    page_title="THFC",
    page_icon="ü§ñ"
)

# C·∫•u h√¨nh logging
log_file = "logs/test_log.log"
os.makedirs(os.path.dirname(log_file), exist_ok=True)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(log_file, encoding='utf-8')
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
if not logger.handlers:
    logger.addHandler(file_handler)

# Global site variable - ƒë∆∞·ª£c set d·ª±a tr√™n trang hi·ªán t·∫°i
SITE = "THFC"

# Config c·ª©ng cho s·ªë lu·ªìng x·ª≠ l√Ω ƒë·ªìng th·ªùi
MAX_WORKERS = 5

# Kh·ªüi t·∫°o session state
if 'results' not in st.session_state:
    st.session_state.results = None
if 'schedule_enabled' not in st.session_state:
    st.session_state.schedule_enabled = {}
if 'schedule_thread' not in st.session_state:
    st.session_state.schedule_thread = {}
if 'test_history' not in st.session_state:
    st.session_state.test_history = {}
if 'failed_tests' not in st.session_state:
    st.session_state.failed_tests = {}
if 'test_changes_history' not in st.session_state:
    st.session_state.test_changes_history = {}
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = None
if 'scheduled_jobs' not in st.session_state:
    st.session_state.scheduled_jobs = []

# ƒê∆∞·ªùng d·∫´n file
RESULTS_DIR = "test_results"
FAILED_TESTS_FILE = os.path.join(RESULTS_DIR, "failed_tests.pkl")
TEST_HISTORY_FILE = os.path.join(RESULTS_DIR, "test_history.pkl")
TEST_CHANGES_FILE = os.path.join(RESULTS_DIR, "test_changes.pkl")

# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
os.makedirs(RESULTS_DIR, exist_ok=True)

# --- C√°c h√†m x·ª≠ l√Ω ---
def get_current_site():
    """Get current site from global variable"""
    return SITE

def filter_results(results, threshold, criterion, filter_type):
    filtered_data = []
    for result in results:
        score = result["evaluate_result"]["scores"].get(criterion, 0)
        if (filter_type == "greater" and score >= threshold) or \
           (filter_type == "less" and score <= threshold):
            filtered_data.append(result)
    return filtered_data

def get_site_paths(site):
    site_dir = os.path.join(RESULTS_DIR, site)
    os.makedirs(site_dir, exist_ok=True)
    return {
        "failed_tests": os.path.join(site_dir, "failed_tests.pkl"),
        "test_history": os.path.join(site_dir, "test_history.pkl"),
        "test_changes": os.path.join(site_dir, "test_changes.pkl")
    }

def save_test_results(results, test_name, site):
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{test_name}_{timestamp}.xlsx"
    filepath = os.path.join(RESULTS_DIR, site, filename)
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    df = pd.DataFrame(results)
    df.to_excel(filepath, index=False)

    # Ph√¢n lo·∫°i k·∫øt qu·∫£ chi ti·∫øt
    fail_criterion = st.session_state.get("fail_criterion", "accuracy")
    fail_threshold = st.session_state.get("fail_threshold", 8.0)
    
    num_passed = 0
    num_failed_api = 0
    num_failed_extract = 0
    num_failed_accuracy = 0
    
    for r in results:
        if "failed_details" in r:
            reason = r["failed_details"].get("reason", "")
            if "API" in reason or "Exception" in reason:
                num_failed_api += 1
            elif "evaluate_result" in reason:
                num_failed_extract += 1
            else:
                num_failed_accuracy += 1
        else:
            # Ki·ªÉm tra ti√™u ch√≠ fail
            criterion_score = r["evaluate_result"]["scores"].get(fail_criterion, 0)
            if criterion_score >= fail_threshold:
                num_passed += 1
            else:
                num_failed_accuracy += 1
    
    num_failed = num_failed_api + num_failed_extract + num_failed_accuracy

    history_entry = {
        "timestamp": timestamp,
        "test_name": test_name,
        "num_questions": len(results),
        "num_passed": num_passed,
        "num_failed": num_failed,
        "num_failed_api": num_failed_api,
        "num_failed_extract": num_failed_extract,
        "num_failed_accuracy": num_failed_accuracy,
        "filename": filename
    }

    # Initialize test_history if not exists
    if 'test_history' not in st.session_state:
        st.session_state.test_history = {}
    if site not in st.session_state.test_history:
        st.session_state.test_history[site] = []
    st.session_state.test_history[site].append(history_entry)

    try:
        site_paths = get_site_paths(site)
        with open(site_paths["test_history"], "wb") as f:
            pickle.dump(st.session_state.test_history[site], f)
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ test: {str(e)}")

    return filepath

def save_failed_test_details(failed_results, site=None):
    # Use provided site or fallback to session state
    if site is None:
        site = get_current_site()
    
    # Initialize failed_tests if not exists
    if 'failed_tests' not in st.session_state:
        st.session_state.failed_tests = {}
    
    if site not in st.session_state.failed_tests:
        st.session_state.failed_tests[site] = []

    for result in failed_results:
        st.session_state.failed_tests[site].append(result)

    site_paths = get_site_paths(site)
    with open(site_paths["failed_tests"], "wb") as f:
        pickle.dump(st.session_state.failed_tests[site], f)

def run_scheduled_test(file_path, test_name, site, api_url, evaluate_api_url):
    logger.info(f"B·∫Øt ƒë·∫ßu ch·∫°y test theo l·ªãch: {test_name} cho site {site} v·ªõi API {api_url}")
    
    # Initialize session state for scheduled context if needed
    try:
        if 'failed_tests' not in st.session_state:
            st.session_state.failed_tests = {}
        if 'test_history' not in st.session_state:
            st.session_state.test_history = {}
        if 'test_changes_history' not in st.session_state:
            st.session_state.test_changes_history = {}
    except Exception as e:
        logger.warning(f"Kh√¥ng th·ªÉ kh·ªüi t·∫°o session state: {str(e)}")
    
    try:
        abs_path = os.path.abspath(file_path)
        if not os.path.exists(abs_path):
            logger.error(f"File test kh√¥ng t·ªìn t·∫°i: {abs_path}")
            return
        logger.info(f"ƒê·ªçc file test: {abs_path}")
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra file test: {str(e)}")
        return
    try:
        df = pd.read_excel(abs_path)
        questions = df.iloc[:, 0].tolist()
        true_answers = df.iloc[:, 1].tolist()
        levels = df.iloc[:, 2].tolist() if len(df.columns) > 2 else ["L1"] * len(questions)
        departments = df.iloc[:, 3].tolist() if len(df.columns) > 3 else ["Ph√≤ng kinh doanh (Sales)"] * len(questions)
        logger.info(f"S·ªë c√¢u h·ªèi ƒë·ªçc ƒë∆∞·ª£c: {len(questions)} | S·ªë ƒë√°p √°n: {len(true_answers)}")

        results, failed_questions = process_questions_batch(
            questions, 
            true_answers, 
            levels,
            departments,
            test_name=test_name, 
            is_scheduled=True,
            site=site,
            api_url=api_url,
            evaluate_api_url=evaluate_api_url
        )

        try:
            # Lu√¥n c·ªë g·∫Øng l∆∞u file k·∫øt qu·∫£ ƒë·ªÉ thu·∫≠n ti·ªán ki·ªÉm tra, k·ªÉ c·∫£ khi r·ªóng
            saved_path = save_test_results(results or [], test_name, site)
            logger.info(f"ƒê√£ l∆∞u k·∫øt qu·∫£ test: {test_name} ‚Üí {os.path.abspath(saved_path)}")
        except Exception as e:
            logger.error(f"L·ªói khi l∆∞u k·∫øt qu·∫£ test {test_name}: {str(e)}")
        if failed_questions:
            logger.warning(f"C√≥ {len(failed_questions)} c√¢u h·ªèi th·∫•t b·∫°i trong test: {test_name}")

    except Exception as e:
        logger.error(f"L·ªói khi ch·∫°y test theo l·ªãch {test_name}: {str(e)}")

def schedule_manager():
    while True:
        schedule.run_pending()
        time.sleep(1)

def setup_schedule(file_path, schedule_type, schedule_time, schedule_day,
                   test_name, site, api_url, evaluate_api_url,
                   custom_interval=None, custom_unit=None):
    logger.info(f"Thi·∫øt l·∫≠p l·ªãch cho test: {test_name} - {schedule_type} - Site: {site}")
    
    import schedule  # ƒë·∫£m b·∫£o import trong h√†m ho·∫∑c ƒë·∫ßu file
    
    # Lo·∫°i b·ªè vi·ªác d√πng job = schedule.every() r·ªìi ti·∫øp t·ª•c job.xxx
    # Thay v√†o ƒë√≥ m·ªói nh√°nh s·∫Ω t·∫°o schedule m·ªõi tr·ª±c ti·∫øp
    
    if schedule_type == "minute":
        # ch·∫°y m·ªói ph√∫t
        schedule.every().minute.do(
            run_scheduled_test,
            file_path, test_name, site, api_url, evaluate_api_url
        )
    
    elif schedule_type == "hourly":
        # ch·∫°y m·ªói gi·ªù t·∫°i ph√∫t c·ª• th·ªÉ
        # schedule.every().hour.at(":MM").do(...)
        minute = schedule_time.split(':')[1]
        schedule.every().hour.at(f":{minute}").do(
            run_scheduled_test,
            file_path, test_name, site, api_url, evaluate_api_url
        )
    
    elif schedule_type == "daily":
        # m·ªói ng√†y v√†o l√∫c HH:MM
        schedule.every().day.at(schedule_time).do(
            run_scheduled_test,
            file_path, test_name, site, api_url, evaluate_api_url
        )
    
    elif schedule_type == "weekly":
        day = schedule_day.lower()
        if day == "monday":
            schedule.every().monday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "tuesday":
            schedule.every().tuesday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "wednesday":
            schedule.every().wednesday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "thursday":
            schedule.every().thursday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "friday":
            schedule.every().friday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "saturday":
            schedule.every().saturday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif day == "sunday":
            schedule.every().sunday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        else:
            # m·∫∑c ƒë·ªãnh Monday n·∫øu kh√¥ng h·ª£p l·ªá
            schedule.every().monday.at(schedule_time).do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
    
    elif schedule_type == "custom" and custom_interval and custom_unit:
        # ch·∫°y theo kho·∫£ng custom
        if custom_unit == "ph√∫t":
            schedule.every(custom_interval).minutes.do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif custom_unit == "gi·ªù":
            schedule.every(custom_interval).hours.do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif custom_unit == "ng√†y":
            schedule.every(custom_interval).days.do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        elif custom_unit == "tu·∫ßn":
            schedule.every(custom_interval).weeks.do(
                run_scheduled_test,
                file_path, test_name, site, api_url, evaluate_api_url
            )
        else:
            logger.warning(f"ƒê∆°n v·ªã l·ªãch kh√¥ng h·ª£p l·ªá: {custom_unit}")
    else:
        logger.warning(f"Kh√¥ng c√≥ l·ªãch h·ª£p l·ªá cho lo·∫°i {schedule_type}")
    
    # Kh·ªüi ƒë·ªông thread n·∫øu ch∆∞a c√≥ cho site
    if site not in st.session_state.schedule_thread or not st.session_state.schedule_thread[site].is_alive():
        thread = threading.Thread(target=schedule_manager, daemon=True)
        st.session_state.schedule_thread[site] = thread
        thread.start()
        logger.info(f"ƒê√£ kh·ªüi ƒë·ªông thread qu·∫£n l√Ω l·ªãch cho site: {site}")

# --- Helper Functions ---
def get_criteria_from_prompt(system_prompt):
    """L·∫•y danh s√°ch criteria t·ª´ system prompt ƒë·ªÉ s·ª≠ d·ª•ng cho fail criterion selection"""
    import re
    
    if not system_prompt:
        return ["accuracy", "relevance", "completeness", "clarity", "access_control", "average"]
    
    criteria = []
    lines = system_prompt.split('\n')
    
    for line in lines:
        line = line.strip()
        # T√¨m pattern ### s·ªë. T√™n ti√™u ch√≠ (M√¥ t·∫£)
        match = re.match(r'^###\s*\d+\.\s*([^(]+?)\s*\(([^)]+)\)\s*$', line, re.IGNORECASE)
        if match:
            criterion = match.group(1).strip()
            if criterion and len(criterion) < 50:
                criteria.append(criterion)
        else:
            # Th·ª≠ pattern kh√¥ng c√≥ m√¥ t·∫£
            match = re.match(r'^###\s*\d+\.\s*([^(]+?)\s*$', line, re.IGNORECASE)
            if match:
                criterion = match.group(1).strip()
                if criterion and len(criterion) < 50:
                    criteria.append(criterion)
    
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m v·ªõi format kh√°c (d·∫•u -)
    if not criteria:
        for line in lines:
            line = line.strip()
            # T√¨m pattern - T√™n ti√™u ch√≠ (M√¥ t·∫£)
            match = re.match(r'^-\s*([^(]+?)\s*\(([^)]+)\)\s*$', line, re.IGNORECASE)
            if match:
                criterion = match.group(1).strip()
                if criterion and len(criterion) < 50:
                    criteria.append(criterion)
            else:
                # Th·ª≠ pattern kh√¥ng c√≥ m√¥ t·∫£
                match = re.match(r'^-\s*([^(]+?)\s*$', line, re.IGNORECASE)
                if match:
                    criterion = match.group(1).strip()
                    if criterion and len(criterion) < 50:
                        criteria.append(criterion)
    
    # Chu·∫©n h√≥a t√™n criteria th√†nh lowercase v√† thay kho·∫£ng tr·∫Øng b·∫±ng _
    normalized_criteria = []
    for criterion in criteria:
        # Lo·∫°i b·ªè s·ªë th·ª© t·ª± v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        clean_name = re.sub(r'^\d+\.?\s*', '', criterion)
        clean_name = re.sub(r'[^\w\s]', '', clean_name)
        clean_name = clean_name.strip().lower().replace(' ', '_')
        normalized_criteria.append(clean_name)
    
    # Lo·∫°i b·ªè duplicate v√† gi·ªØ th·ª© t·ª±
    seen = set()
    unique_criteria = []
    for criterion in normalized_criteria:
        if criterion not in seen:
            seen.add(criterion)
            unique_criteria.append(criterion)
    
    # Th√™m "average" n·∫øu ch∆∞a c√≥
    if "average" not in unique_criteria:
        unique_criteria.append("average")
    
    # Fallback n·∫øu kh√¥ng t√¨m th·∫•y criteria n√†o
    if not unique_criteria:
        unique_criteria = ["accuracy", "relevance", "completeness", "clarity", "access_control", "average"]
    
    return unique_criteria

# --- Prompt Management Functions ---
def get_prompt_paths(site):
    """Get prompt file paths for a specific site"""
    prompt_dir = os.path.join("prompts", site)
    return {
        "system_prompt": os.path.join(prompt_dir, "system_prompt.txt"),
        "human_prompt": os.path.join(prompt_dir, "human_prompt.txt")
    }

def get_original_prompt_paths():
    """Get original prompt file paths"""
    return {
        "system_prompt": os.path.join("original_prompts", "system_prompt.txt"),
        "human_prompt": os.path.join("original_prompts", "human_prompt.txt")
    }

def copy_original_prompts_to_site(site):
    """Copy prompts from original_prompts to site folder"""
    try:
        original_prompts = load_original_prompts()
        
        if original_prompts["system_prompt"] or original_prompts["human_prompt"]:
            # Save to site folder
            save_prompts_for_site(site, original_prompts["system_prompt"], original_prompts["human_prompt"])
            logger.info(f"ƒê√£ copy original prompts sang site {site}")
            return True
        else:
            logger.warning("Original prompts r·ªóng, kh√¥ng th·ªÉ copy")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi copy original prompts sang site {site}: {str(e)}")
        return False

def load_original_prompts():
    """Load prompts from original_prompts folder"""
    original_paths = get_original_prompt_paths()
    prompts = {}
    
    try:
        if os.path.exists(original_paths["system_prompt"]):
            with open(original_paths["system_prompt"], "r", encoding="utf-8") as f:
                prompts["system_prompt"] = f.read()
        else:
            prompts["system_prompt"] = ""
            logger.warning("Original system_prompt.txt kh√¥ng t·ªìn t·∫°i")
            
        if os.path.exists(original_paths["human_prompt"]):
            with open(original_paths["human_prompt"], "r", encoding="utf-8") as f:
                prompts["human_prompt"] = f.read()
        else:
            prompts["human_prompt"] = ""
            logger.warning("Original human_prompt.txt kh√¥ng t·ªìn t·∫°i")
            
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc original prompts: {str(e)}")
        prompts = {"system_prompt": "", "human_prompt": ""}
    
    return prompts

def save_prompts_for_site(site, system_prompt, human_prompt):
    """Save prompts for a specific site"""
    prompt_paths = get_prompt_paths(site)
    
    try:
        # Create directory if not exists
        os.makedirs(os.path.dirname(prompt_paths["system_prompt"]), exist_ok=True)
        
        # Save system prompt
        with open(prompt_paths["system_prompt"], "w", encoding="utf-8") as f:
            f.write(system_prompt)
            
        # Save human prompt
        with open(prompt_paths["human_prompt"], "w", encoding="utf-8") as f:
            f.write(human_prompt)
            
        logger.info(f"ƒê√£ l∆∞u prompts cho site {site}")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u prompts cho site {site}: {str(e)}")
        return False

def load_prompts_for_site(site):
    """Load prompts for a specific site, copy from original if not exists"""
    prompt_paths = get_prompt_paths(site)
    prompts = {}
    
    # Check if prompts exist for this site
    site_prompts_exist = os.path.exists(prompt_paths["system_prompt"]) and os.path.exists(prompt_paths["human_prompt"])
    
    # If not exist, copy from original_prompts
    if not site_prompts_exist:
        logger.info(f"Prompts cho site {site} ch∆∞a t·ªìn t·∫°i, ƒëang copy t·ª´ original_prompts")
        copy_original_prompts_to_site(site)
    
    try:
        if os.path.exists(prompt_paths["system_prompt"]):
            with open(prompt_paths["system_prompt"], "r", encoding="utf-8") as f:
                prompts["system_prompt"] = f.read()
        else:
            prompts["system_prompt"] = ""
            
        if os.path.exists(prompt_paths["human_prompt"]):
            with open(prompt_paths["human_prompt"], "r", encoding="utf-8") as f:
                prompts["human_prompt"] = f.read()
        else:
            prompts["human_prompt"] = ""
            
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc prompts cho site {site}: {str(e)}")
        prompts = {"system_prompt": "", "human_prompt": ""}
    
    return prompts

# --- Configuration Management Functions ---
def get_config_file_path(site):
    """Get configuration file path for a specific site"""
    config_dir = "config"
    os.makedirs(config_dir, exist_ok=True)
    return os.path.join(config_dir, f"{site}_config.pkl")

def save_config_to_file(site, config):
    """Save configuration to file"""
    try:
        config_file = get_config_file_path(site)
        with open(config_file, "wb") as f:
            pickle.dump(config, f)
        logger.info(f"ƒê√£ l∆∞u c·∫•u h√¨nh cho site {site}")
        return True
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u c·∫•u h√¨nh cho site {site}: {str(e)}")
        return False

def load_config_from_file(site):
    """Load configuration from file"""
    try:
        config_file = get_config_file_path(site)
        if os.path.exists(config_file):
            with open(config_file, "rb") as f:
                config = pickle.load(f)
            logger.info(f"ƒê√£ t·∫£i c·∫•u h√¨nh cho site {site}")
            return config
        else:
            logger.info(f"Ch∆∞a c√≥ file c·∫•u h√¨nh cho site {site}")
            return None
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i c·∫•u h√¨nh cho site {site}: {str(e)}")
        return None

def get_default_config():
    """Get default configuration"""
    return {
        "api_url": "https://site1.com",
        "evaluate_api_url": "https://site2.com",
        "fail_criterion": "accuracy",
        "fail_threshold": 8.0,
        "add_chat_history_global": False
    }

# Giao di·ªán Streamlit
st.title("ü§ñ Agent Testing")

# --- Load configuration from file ---
def load_site_config():
    """Load configuration for current site"""
    site = get_current_site()
    config = load_config_from_file(site)
    
    if config:
        # Load t·ª´ file
        st.session_state.api_url = config.get("api_url", "https://site1.com")
        st.session_state.evaluate_api_url = config.get("evaluate_api_url", "https://site2.com")
        st.session_state.fail_criterion = config.get("fail_criterion", "accuracy")
        st.session_state.fail_threshold = config.get("fail_threshold", 8.0)
        st.session_state.add_chat_history_global = config.get("add_chat_history_global", False)
        logger.info(f"ƒê√£ load c·∫•u h√¨nh t·ª´ file cho site {site}")
    else:
        # S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
        default_config = get_default_config()
        st.session_state.api_url = default_config["api_url"]
        st.session_state.evaluate_api_url = default_config["evaluate_api_url"]
        st.session_state.fail_criterion = default_config["fail_criterion"]
        st.session_state.fail_threshold = default_config["fail_threshold"]
        st.session_state.add_chat_history_global = default_config["add_chat_history_global"]
        logger.info(f"S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh cho site {site}")

# Load c·∫•u h√¨nh khi kh·ªüi ƒë·ªông
if 'config_loaded' not in st.session_state:
    load_site_config()
    st.session_state.config_loaded = True

# --- C·∫•u h√¨nh v√† c√°c bi·∫øn to√†n c·ª•c ---
with st.expander("‚öôÔ∏è C·∫•u h√¨nh API v√† c√°c tham s·ªë", expanded=False):
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**C·∫•u h√¨nh API**")
        API_URL = st.text_input("API URL", value=st.session_state.get("api_url", "https://site1.com"), key="api_url_input")
        EVALUATE_API_URL = st.text_input("Evaluate API URL", value=st.session_state.get("evaluate_api_url", "https://site2.com"), key="evaluate_api_url_input")
    
    with col2:
        st.write("**C·∫•u h√¨nh Test**")
        add_chat_history_global = st.checkbox("Th√™m chat history (gi·∫£ l·∫≠p ƒë√£ cung c·∫•p th√¥ng tin)", value=st.session_state.get("add_chat_history_global", False), key="add_chat_history_checkbox")
    
    st.divider()
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.write("**Ti√™u ch√≠ ƒë√°nh gi√° fail**")
        
        # L·∫•y criteria ƒë·ªông t·ª´ system prompt
        current_system_prompt = st.session_state.get("current_system_prompt", "")
        if not current_system_prompt:
            # Load system prompt hi·ªán t·∫°i n·∫øu ch∆∞a c√≥
            try:
                site = get_current_site()
                prompts = load_prompts_for_site(site)
                current_system_prompt = prompts.get("system_prompt", "")
                st.session_state.current_system_prompt = current_system_prompt
            except:
                current_system_prompt = ""
        
        # L·∫•y danh s√°ch criteria t·ª´ prompt
        criterion_options = get_criteria_from_prompt(current_system_prompt)
        
        # L·∫•y ti√™u ch√≠ hi·ªán t·∫°i t·ª´ session state
        current_criterion = st.session_state.get("fail_criterion", criterion_options[0] if criterion_options else "accuracy")
        
        # T√¨m index c·ªßa ti√™u ch√≠ hi·ªán t·∫°i
        if current_criterion in criterion_options:
            criterion_index = criterion_options.index(current_criterion)
        else:
            criterion_index = 0
            # C·∫≠p nh·∫≠t session state n·∫øu ti√™u ch√≠ hi·ªán t·∫°i kh√¥ng c√≥ trong danh s√°ch m·ªõi
            st.session_state.fail_criterion = criterion_options[0] if criterion_options else "accuracy"
        
        col1_1, col1_2 = st.columns([3, 1])
        with col1_1:
            fail_criterion = st.selectbox(
                "Ch·ªçn ti√™u ch√≠",
                criterion_options,
                index=criterion_index,
                help=f"Ti√™u ch√≠ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c ƒë·ªãnh test case fail (t·ª± ƒë·ªông t·ª´ system prompt: {len(criterion_options)} ti√™u ch√≠)",
                key="fail_criterion_select"
            )
        with col1_2:
            if st.button("üîÑ", help="Refresh criteria t·ª´ system prompt hi·ªán t·∫°i", key="refresh_criteria"):
                try:
                    site = get_current_site()
                    prompts = load_prompts_for_site(site)
                    new_system_prompt = prompts.get("system_prompt", "")
                    st.session_state.current_system_prompt = new_system_prompt
                    st.rerun()
                except Exception as e:
                    st.error(f"L·ªói khi refresh criteria: {str(e)}")
    
    with col2:
        st.write("**Ng∆∞·ª°ng fail**")
        fail_threshold = st.number_input(
            "Ng∆∞·ª°ng ƒëi·ªÉm (< ng∆∞·ª°ng = fail)",
            min_value=0.0,
            max_value=10.0,
            value=st.session_state.get("fail_threshold", 8.0),
            step=0.5,
            help="Test case c√≥ ƒëi·ªÉm th·∫•p h∆°n ng∆∞·ª°ng n√†y s·∫Ω ƒë∆∞·ª£c ƒë√°nh d·∫•u fail",
            key="fail_threshold_input"
        )
    
    with col3:
        st.write("**T√≥m t·∫Øt c·∫•u h√¨nh**")
        st.info(f"Fail n·∫øu **{fail_criterion}** < {fail_threshold}")
        
        # N√∫t l∆∞u c·∫•u h√¨nh
        st.write("")  # Spacing
        if st.button("üíæ L∆∞u c·∫•u h√¨nh", type="primary", use_container_width=True, help="L∆∞u v√† √°p d·ª•ng c·∫•u h√¨nh cho t·∫•t c·∫£ test"):
            # C·∫≠p nh·∫≠t session state
            st.session_state.api_url = API_URL
            st.session_state.evaluate_api_url = EVALUATE_API_URL
            st.session_state.fail_criterion = fail_criterion
            st.session_state.fail_threshold = fail_threshold
            st.session_state.add_chat_history_global = add_chat_history_global
            
            # L∆∞u v√†o file
            site = get_current_site()
            config = {
                "api_url": API_URL,
                "evaluate_api_url": EVALUATE_API_URL,
                "fail_criterion": fail_criterion,
                "fail_threshold": fail_threshold,
                "add_chat_history_global": add_chat_history_global
            }
            
            if save_config_to_file(site, config):
                st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o file! √Åp d·ª•ng cho t·∫•t c·∫£ test (ƒë∆°n l·∫ª, h√†ng lo·∫°t, l·∫≠p l·ªãch)")
            else:
                st.error("‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh v√†o file!")
            time.sleep(0.5)  # Delay ƒë·ªÉ user th·∫•y th√¥ng b√°o
            st.rerun()
    
    # Configuration ƒë√£ ƒë∆∞·ª£c load t·ª´ file ·ªü tr√™n

# --- Prompt Management Functions ---
def get_prompt_paths(site):
    """Get prompt file paths for a specific site"""
    prompt_dir = os.path.join("prompts", site)
    return {
        "system_prompt": os.path.join(prompt_dir, "system_prompt.txt"),
        "human_prompt": os.path.join(prompt_dir, "human_prompt.txt")
    }

def get_original_prompt_paths():
    """Get original prompt file paths"""
    return {
        "system_prompt": os.path.join("original_prompts", "system_prompt.txt"),
        "human_prompt": os.path.join("original_prompts", "human_prompt.txt")
    }

def get_backup_prompt_paths(site):
    """Get backup prompt file paths for a specific site"""
    backup_dir = os.path.join("backup_prompts", site)
    return {
        "system_prompt": os.path.join(backup_dir, "system_prompt.txt"),
        "human_prompt": os.path.join(backup_dir, "human_prompt.txt")
    }

def get_backup_extract_sections_path(site):
    """Get backup extract_sections.py file path for a specific site"""
    backup_dir = os.path.join("backup_prompts", site)
    return os.path.join(backup_dir, "extract_sections.py")

def get_extract_sections_path(site):
    """Get extract_sections.py file path for a specific site"""
    utils_dir = os.path.join("utils", site)
    return os.path.join(utils_dir, "extract_sections.py")

def load_original_prompts():
    """Load prompts from original_prompts folder"""
    original_paths = get_original_prompt_paths()
    prompts = {}
    
    try:
        if os.path.exists(original_paths["system_prompt"]):
            with open(original_paths["system_prompt"], "r", encoding="utf-8") as f:
                prompts["system_prompt"] = f.read()
        else:
            prompts["system_prompt"] = ""
            logger.warning("Original system_prompt.txt kh√¥ng t·ªìn t·∫°i")
            
        if os.path.exists(original_paths["human_prompt"]):
            with open(original_paths["human_prompt"], "r", encoding="utf-8") as f:
                prompts["human_prompt"] = f.read()
        else:
            prompts["human_prompt"] = ""
            logger.warning("Original human_prompt.txt kh√¥ng t·ªìn t·∫°i")
            
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc original prompts: {str(e)}")
        prompts = {"system_prompt": "", "human_prompt": ""}
    
    return prompts

def backup_prompts_for_site(site):
    """Backup current prompts to backup_prompts folder"""
    try:
        # Load current prompts
        current_prompts = load_prompts_for_site(site)
        
        if not (current_prompts["system_prompt"] or current_prompts["human_prompt"]):
            logger.warning(f"Prompts hi·ªán t·∫°i c·ªßa site {site} r·ªóng, kh√¥ng th·ªÉ backup")
            return False
        
        # Create backup directory
        backup_paths = get_backup_prompt_paths(site)
        os.makedirs(os.path.dirname(backup_paths["system_prompt"]), exist_ok=True)
        
        # Save to backup folder
        with open(backup_paths["system_prompt"], "w", encoding="utf-8") as f:
            f.write(current_prompts["system_prompt"])
        with open(backup_paths["human_prompt"], "w", encoding="utf-8") as f:
            f.write(current_prompts["human_prompt"])
        
        logger.info(f"ƒê√£ backup prompts cho site {site}")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi backup prompts cho site {site}: {str(e)}")
        return False

def backup_extract_sections_for_site(site):
    """Backup current extract_sections to backup_prompts folder"""
    try:
        # Load current extract sections
        current_code = load_extract_sections_for_site(site)
        
        if not current_code:
            logger.warning(f"Extract sections hi·ªán t·∫°i c·ªßa site {site} r·ªóng, kh√¥ng th·ªÉ backup")
            return False
        
        # Create backup directory
        backup_path = get_backup_extract_sections_path(site)
        os.makedirs(os.path.dirname(backup_path), exist_ok=True)
        
        # Save to backup folder
        with open(backup_path, "w", encoding="utf-8") as f:
            f.write(current_code)
        
        logger.info(f"ƒê√£ backup extract_sections cho site {site}")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi backup extract_sections cho site {site}: {str(e)}")
        return False

def restore_prompts_from_backup(site):
    """Restore prompts from backup, fallback to original if backup not exists"""
    try:
        backup_paths = get_backup_prompt_paths(site)
        
        # Check if backup exists
        if os.path.exists(backup_paths["system_prompt"]) and os.path.exists(backup_paths["human_prompt"]):
            # Load from backup
            with open(backup_paths["system_prompt"], "r", encoding="utf-8") as f:
                system_prompt = f.read()
            with open(backup_paths["human_prompt"], "r", encoding="utf-8") as f:
                human_prompt = f.read()
            
            # Save to site folder
            save_prompts_for_site(site, system_prompt, human_prompt)
            logger.info(f"ƒê√£ restore prompts t·ª´ backup cho site {site}")
            return "backup"
        else:
            # Fallback to original
            original_prompts = load_original_prompts()
            if original_prompts["system_prompt"] or original_prompts["human_prompt"]:
                save_prompts_for_site(site, original_prompts["system_prompt"], original_prompts["human_prompt"])
                logger.info(f"Kh√¥ng t√¨m th·∫•y backup, ƒë√£ restore prompts t·ª´ original cho site {site}")
                return "original"
            else:
                logger.warning("C·∫£ backup v√† original prompts ƒë·ªÅu r·ªóng")
                return False
                
    except Exception as e:
        logger.error(f"L·ªói khi restore prompts cho site {site}: {str(e)}")
        return False

def restore_extract_sections_from_backup(site):
    """Restore extract_sections from backup, fallback to original if backup not exists"""
    try:
        backup_path = get_backup_extract_sections_path(site)
        
        # Check if backup exists
        if os.path.exists(backup_path):
            # Load from backup
            with open(backup_path, "r", encoding="utf-8") as f:
                extract_code = f.read()
            
            # Save to site folder
            save_extract_sections_for_site(site, extract_code)
            logger.info(f"ƒê√£ restore extract_sections t·ª´ backup cho site {site}")
            return "backup"
        else:
            # Fallback to original
            original_code = load_original_extract_sections()
            if original_code:
                save_extract_sections_for_site(site, original_code)
                logger.info(f"Kh√¥ng t√¨m th·∫•y backup, ƒë√£ restore extract_sections t·ª´ original cho site {site}")
                return "original"
            else:
                logger.warning("C·∫£ backup v√† original extract_sections ƒë·ªÅu r·ªóng")
                return False
                
    except Exception as e:
        logger.error(f"L·ªói khi restore extract_sections cho site {site}: {str(e)}")
        return False

def copy_original_prompts_to_site(site):
    """Copy prompts from original_prompts to site folder"""
    try:
        original_prompts = load_original_prompts()
        
        if original_prompts["system_prompt"] or original_prompts["human_prompt"]:
            # Save to site folder
            save_prompts_for_site(site, original_prompts["system_prompt"], original_prompts["human_prompt"])
            logger.info(f"ƒê√£ copy original prompts sang site {site}")
            return True
        else:
            logger.warning("Original prompts r·ªóng, kh√¥ng th·ªÉ copy")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi copy original prompts sang site {site}: {str(e)}")
        return False

def load_prompts_for_site(site):
    """Load prompts for a specific site, copy from original if not exists"""
    prompt_paths = get_prompt_paths(site)
    prompts = {}
    
    # Check if prompts exist for this site
    site_prompts_exist = os.path.exists(prompt_paths["system_prompt"]) and os.path.exists(prompt_paths["human_prompt"])
    
    # If not exist, copy from original_prompts
    if not site_prompts_exist:
        logger.info(f"Prompts cho site {site} ch∆∞a t·ªìn t·∫°i, ƒëang copy t·ª´ original_prompts")
        copy_original_prompts_to_site(site)
    
    try:
        if os.path.exists(prompt_paths["system_prompt"]):
            with open(prompt_paths["system_prompt"], "r", encoding="utf-8") as f:
                prompts["system_prompt"] = f.read()
        else:
            prompts["system_prompt"] = ""
            
        if os.path.exists(prompt_paths["human_prompt"]):
            with open(prompt_paths["human_prompt"], "r", encoding="utf-8") as f:
                prompts["human_prompt"] = f.read()
        else:
            prompts["human_prompt"] = ""
            
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc prompts cho site {site}: {str(e)}")
        prompts = {"system_prompt": "", "human_prompt": ""}
    
    return prompts

def save_prompts_for_site(site, system_prompt, human_prompt):
    """Save prompts for a specific site"""
    prompt_paths = get_prompt_paths(site)
    
    try:
        # Create directory if not exists
        os.makedirs(os.path.dirname(prompt_paths["system_prompt"]), exist_ok=True)
        
        # Save system prompt
        with open(prompt_paths["system_prompt"], "w", encoding="utf-8") as f:
            f.write(system_prompt)
            
        # Save human prompt
        with open(prompt_paths["human_prompt"], "w", encoding="utf-8") as f:
            f.write(human_prompt)
            
        logger.info(f"ƒê√£ l∆∞u prompts cho site {site}")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u prompts cho site {site}: {str(e)}")
        return False

def get_original_extract_sections_path():
    """Get original extract_sections.py file path"""
    return os.path.join("original_prompts", "extract_sections.py")

def load_original_extract_sections():
    """Load extract_sections from original_prompts folder"""
    original_path = get_original_extract_sections_path()
    
    try:
        if os.path.exists(original_path):
            with open(original_path, "r", encoding="utf-8") as f:
                return f.read()
        else:
            logger.warning("Original extract_sections.py kh√¥ng t·ªìn t·∫°i")
            return ""
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc original extract_sections: {str(e)}")
        return ""

def copy_original_extract_sections_to_site(site):
    """Copy extract_sections from original_prompts to site folder"""
    try:
        original_code = load_original_extract_sections()
        
        if original_code:
            # Save to site folder
            save_extract_sections_for_site(site, original_code)
            logger.info(f"ƒê√£ copy original extract_sections sang site {site}")
            return True
        else:
            logger.warning("Original extract_sections r·ªóng, kh√¥ng th·ªÉ copy")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi copy original extract_sections sang site {site}: {str(e)}")
        return False

def load_extract_sections_for_site(site):
    """Load extract_sections.py for a specific site, copy from original if not exists"""
    extract_path = get_extract_sections_path(site)
    
    # If not exist, copy from original_prompts
    if not os.path.exists(extract_path):
        logger.info(f"Extract sections cho site {site} ch∆∞a t·ªìn t·∫°i, ƒëang copy t·ª´ original_prompts")
        copy_original_extract_sections_to_site(site)
    
    try:
        if os.path.exists(extract_path):
            with open(extract_path, "r", encoding="utf-8") as f:
                return f.read()
        else:
            return ""
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc extract_sections cho site {site}: {str(e)}")
        return ""

def save_extract_sections_for_site(site, extract_code):
    """Save extract_sections.py for a specific site"""
    extract_path = get_extract_sections_path(site)
    
    try:
        # Create directory if not exists
        os.makedirs(os.path.dirname(extract_path), exist_ok=True)
        
        with open(extract_path, "w", encoding="utf-8") as f:
            f.write(extract_code)
            
        logger.info(f"ƒê√£ l∆∞u extract_sections cho site {site}")
        return True
        
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u extract_sections cho site {site}: {str(e)}")
        return False

# --- Test Cases Management Functions ---
def get_test_cases_dir(site):
    """Get test cases directory for a specific site"""
    test_cases_dir = os.path.join("test_cases", site)
    os.makedirs(test_cases_dir, exist_ok=True)
    return test_cases_dir

def get_test_cases_file_path(site):
    """Get the single test cases file path for a site"""
    test_cases_dir = get_test_cases_dir(site)
    return os.path.join(test_cases_dir, f"{site}_test_cases.xlsx")

def save_test_cases(site, test_cases_df):
    """Save test cases to file (overwrites existing)"""
    try:
        filepath = get_test_cases_file_path(site)
        test_cases_df.to_excel(filepath, index=False)
        logger.info(f"ƒê√£ l∆∞u test cases cho site {site}")
        return filepath
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u test cases cho site {site}: {str(e)}")
        return None

def load_test_cases(site):
    """Load test cases for a specific site"""
    try:
        filepath = get_test_cases_file_path(site)
        
        if os.path.exists(filepath):
            df = pd.read_excel(filepath)
            return df
        else:
            return None
    except Exception as e:
        logger.error(f"L·ªói khi load test cases cho site {site}: {str(e)}")
        return None

def test_cases_exists(site):
    """Check if test cases exist for a site"""
    filepath = get_test_cases_file_path(site)
    return os.path.exists(filepath)

def delete_test_cases(site):
    """Delete test cases file for a site"""
    try:
        filepath = get_test_cases_file_path(site)
        if os.path.exists(filepath):
            os.remove(filepath)
            logger.info(f"ƒê√£ x√≥a test cases cho site {site}")
            return True
        return False
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a test cases cho site {site}: {str(e)}")
        return False

def delete_site_completely(site):
    """Delete all data related to a site"""
    import shutil
    
    try:
        deleted_items = []
        
        # 1. Delete prompts folder
        prompts_dir = os.path.join("prompts", site)
        if os.path.exists(prompts_dir):
            shutil.rmtree(prompts_dir)
            deleted_items.append(f"prompts/{site}")
        
        # 2. Delete backup prompts folder
        backup_dir = os.path.join("backup_prompts", site)
        if os.path.exists(backup_dir):
            shutil.rmtree(backup_dir)
            deleted_items.append(f"backup_prompts/{site}")
        
        # 3. Delete utils folder (extract_sections)
        utils_dir = os.path.join("utils", site)
        if os.path.exists(utils_dir):
            shutil.rmtree(utils_dir)
            deleted_items.append(f"utils/{site}")
        
        # 4. Delete test_cases folder
        test_cases_dir = get_test_cases_dir(site)
        if os.path.exists(test_cases_dir):
            shutil.rmtree(test_cases_dir)
            deleted_items.append(f"test_cases/{site}")
        
        # 5. Delete test_results folder
        test_results_dir = os.path.join("test_results", site)
        if os.path.exists(test_results_dir):
            shutil.rmtree(test_results_dir)
            deleted_items.append(f"test_results/{site}")
        
        # 6. Delete scheduled_tests folder
        scheduled_tests_dir = os.path.join("scheduled_tests", site)
        if os.path.exists(scheduled_tests_dir):
            shutil.rmtree(scheduled_tests_dir)
            deleted_items.append(f"scheduled_tests/{site}")
        
        # 7. Delete config file
        config_file = get_config_file_path(site)
        if os.path.exists(config_file):
            os.remove(config_file)
            deleted_items.append(f"config/{site}_config.pkl")
        
        # 8. Remove scheduled job
        remove_scheduled_job_for_site(site)
        
        # 9. Clear session state
        if site in st.session_state.get('test_history', {}):
            del st.session_state.test_history[site]
        if site in st.session_state.get('failed_tests', {}):
            del st.session_state.failed_tests[site]
        if site in st.session_state.get('schedule_enabled', {}):
            del st.session_state.schedule_enabled[site]
        if site in st.session_state.get('schedule_thread', {}):
            del st.session_state.schedule_thread[site]
        
        logger.info(f"ƒê√£ x√≥a site '{site}' ho√†n to√†n. C√°c m·ª•c ƒë√£ x√≥a: {', '.join(deleted_items)}")
        return True, deleted_items
        
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a site '{site}': {str(e)}")
        return False, []

def get_default_extract_sections_template(site):
    """Get default extract_sections template based on site"""
    if site == "THFC":
        return '''import requests
import re
from datetime import datetime
import json
import json_repair

def query(API_URL, payload):
    response = requests.post(API_URL, json=payload)
    return response

def extract_json(response_text):
    pattern = r"```json\\s*([\\[{].*?[\\]}])\\s*```"
    match = re.search(pattern, response_text, re.DOTALL)
    if match:
        try:
            obj = json.loads(match.group(1))
        except:
            obj = json_repair.loads(match.group(1))
        return obj
    else:
        obj = json_repair.loads(response_text)
        return obj
    return None

def extract_section(text):
    json_data = extract_json(text)
    print(f"JSON data:\\n{json_data}")
    results = {}
    if json_data:
        results["scores"] = {}
        relevance = json_data["relevance"]
        accuracy = json_data["accuracy"]
        completeness = json_data["completeness"]
        access_control = json_data["access_control"]
        clarity = json_data["clarity"]
        results["scores"]["relevance"] = relevance
        results["scores"]["accuracy"] = accuracy
        results["scores"]["completeness"] = completeness
        results["scores"]["access_control"] = access_control
        results["scores"]["clarity"] = clarity
        results["scores"]["average"] = (relevance + accuracy + completeness + access_control + clarity) / 5
        results["comments"] = json_data["comments"]
        print(f"Extracted: {results}")
        return results
    else:
        return None'''
    else:  # Agent HR N·ªôi b·ªô
        return '''import requests
import re
from datetime import datetime
import json
import json_repair

def query(API_URL, payload):
    response = requests.post(API_URL, json=payload)
    return response

def extract_json(response_text):
    pattern = r"```json\\s*([\\[{].*?[\\]}])\\s*```"
    match = re.search(pattern, response_text, re.DOTALL)
    if match:
        try:
            obj = json.loads(match.group(1))
        except:
            obj = json_repair.loads(match.group(1))
        return obj
    else:
        obj = json_repair.loads(response_text)
        return obj
    return None

def extract_section(text):
    json_data = extract_json(text)
    print(f"JSON data:\\n{json_data}")
    results = {}
    if json_data:
        results["scores"] = {}
        relevance = json_data["relevance"]
        accuracy = json_data["accuracy"]
        completeness = json_data["completeness"]
        clarity = json_data["clarity"]
        tone = json_data["tone"]
        results["scores"]["relevance"] = relevance
        results["scores"]["accuracy"] = accuracy
        results["scores"]["completeness"] = completeness
        results["scores"]["clarity"] = clarity
        results["scores"]["tone"] = tone
        results["scores"]["average"] = (relevance + accuracy + completeness + clarity + tone) / 5
        results["comments"] = json_data["comments"]
        return results
    else:
        return None'''

def auto_generate_extract_sections_from_prompt(system_prompt):
    """T·ª± ƒë·ªông t·∫°o extract sections code d·ª±a tr√™n system prompt"""
    import re
    
    # T√¨m c√°c ti√™u ch√≠ ƒë√°nh gi√° trong system prompt - C√≥ b·∫Øt c·∫£ m√¥ t·∫£ trong ngo·∫∑c
    criteria = []
    criteria_descriptions = []
    lines = system_prompt.split('\n')
    
    for line in lines:
        line = line.strip()
        # T√¨m pattern ### s·ªë. T√™n ti√™u ch√≠ (M√¥ t·∫£)
        match = re.match(r'^###\s*\d+\.\s*([^(]+?)\s*\(([^)]+)\)\s*$', line, re.IGNORECASE)
        if match:
            criterion = match.group(1).strip()
            description = match.group(2).strip()
            if criterion and len(criterion) < 50:  # Ch·ªâ l·∫•y t√™n ng·∫Øn
                criteria.append(criterion)
                criteria_descriptions.append(description)
        else:
            # Th·ª≠ pattern kh√¥ng c√≥ m√¥ t·∫£
            match = re.match(r'^###\s*\d+\.\s*([^(]+?)\s*$', line, re.IGNORECASE)
            if match:
                criterion = match.group(1).strip()
                if criterion and len(criterion) < 50:
                    criteria.append(criterion)
                    criteria_descriptions.append("")
    
    # N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m v·ªõi format kh√°c (d·∫•u -)
    if not criteria:
        for line in lines:
            line = line.strip()
            # T√¨m pattern - T√™n ti√™u ch√≠ (M√¥ t·∫£)
            match = re.match(r'^-\s*([^(]+?)\s*\(([^)]+)\)\s*$', line, re.IGNORECASE)
            if match:
                criterion = match.group(1).strip()
                description = match.group(2).strip()
                if criterion and len(criterion) < 50:
                    criteria.append(criterion)
                    criteria_descriptions.append(description)
            else:
                # Th·ª≠ pattern kh√¥ng c√≥ m√¥ t·∫£
                match = re.match(r'^-\s*([^(]+?)\s*$', line, re.IGNORECASE)
                if match:
                    criterion = match.group(1).strip()
                    if criterion and len(criterion) < 50:
                        criteria.append(criterion)
                        criteria_descriptions.append("")
    
    # Chu·∫©n h√≥a t√™n criteria th√†nh lowercase v√† thay kho·∫£ng tr·∫Øng b·∫±ng _
    normalized_criteria = []
    for criterion in criteria:
        # Lo·∫°i b·ªè s·ªë th·ª© t·ª± v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        clean_name = re.sub(r'^\d+\.?\s*', '', criterion)
        clean_name = re.sub(r'[^\w\s]', '', clean_name)
        clean_name = clean_name.strip().lower().replace(' ', '_')
        normalized_criteria.append(clean_name)
    
    # Lo·∫°i b·ªè duplicate v√† gi·ªØ th·ª© t·ª±, ƒë·ªìng th·ªùi gi·ªØ c·∫£ description
    seen = set()
    unique_criteria = []
    unique_descriptions = []
    for i, criterion in enumerate(normalized_criteria):
        if criterion not in seen:
            seen.add(criterion)
            unique_criteria.append(criterion)
            unique_descriptions.append(criteria_descriptions[i] if i < len(criteria_descriptions) else "")
    
    # T·∫°o code extract sections
    code_lines = [
        'import requests',
        'import re',
        'from datetime import datetime',
        'import json',
        'import json_repair',
        '',
        'def query(API_URL, payload):',
        '    response = requests.post(API_URL, json=payload)',
        '    return response',
        '',
        'def extract_json(response_text):',
        '    pattern = r"```json\\\\s*([\\\\[{].*?[\\\\]}])\\\\s*```"',
        '    match = re.search(pattern, response_text, re.DOTALL)',
        '    if match:',
        '        try:',
        '            obj = json.loads(match.group(1))',
        '        except:',
        '            obj = json_repair.loads(match.group(1))',
        '        return obj',
        '    else:',
        '        obj = json_repair.loads(response_text)',
        '        return obj',
        '    return None',
        '',
        'def extract_section(text):',
        '    json_data = extract_json(text)',
        '    print(f"JSON data:\\n{json_data}")',
        '    results = {}',
        '    if json_data:',
        '        results["scores"] = {}',
    ]
    
    # Th√™m c√°c d√≤ng extract cho t·ª´ng criteria
    for criterion in unique_criteria:
        code_lines.append(f'        {criterion} = json_data["{criterion}"]')
        code_lines.append(f'        results["scores"]["{criterion}"] = {criterion}')
    
    # T√≠nh average
    criteria_list = ' + '.join(unique_criteria)
    code_lines.extend([
        f'        results["scores"]["average"] = ({criteria_list}) / {len(unique_criteria)}',
        '        results["comments"] = json_data["comments"]',
        '        print(f"Extracted: {results}")',
        '        return results',
        '    else:',
        '        return None'
    ])
    
    # Return c·∫£ code v√† mapping info ƒë·ªÉ hi·ªÉn th·ªã
    return {
        'code': '\n'.join(code_lines),
        'criteria': criteria,
        'normalized_criteria': unique_criteria,
        'descriptions': unique_descriptions
    }


# T·∫£i prompts
def load_prompts():
    global evaluate_system_prompt
    try:
        site = get_current_site()
        prompts = load_prompts_for_site(site)
        evaluate_system_prompt = prompts["system_prompt"]
    except FileNotFoundError:
        st.error("Kh√¥ng t√¨m th·∫•y file prompt. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")
        evaluate_system_prompt = ""
load_prompts()

# --- C√°c h√†m x·ª≠ l√Ω ch√≠nh ---
progress_queue = st.empty()

def update_progress(container, total):
    processed_count = 0
    while processed_count < total:
        try:
            message = progress_queue.get(timeout=1)
            if "SUCCESS" in message:
                processed_count += 1
            container.text(f"Ti·∫øn tr√¨nh: {processed_count}/{total} c√¢u h·ªèi ƒë√£ x·ª≠ l√Ω.")
            st.info(message)
        except Exception as e:
            st.error(f"L·ªói khi c·∫≠p nh·∫≠t ti·∫øn tr√¨nh: {str(e)}")
            break


def process_single_question(question, true_answer, level, department, index, total_questions, add_chat_history=False, custom_history=None, site=None, api_url=None, evaluate_api_url=None):
    try:
        chat_id = str(uuid4())
        site_payload = {
            "chat_id": chat_id,
            "question": question,
            "site": site or get_current_site(),
            "overrideConfig":
                {
                    "stateMemory": [
                        {
                            "Key": "level",
                            "Operation": "Replace",
                            "Default Value": level
                        },
                        {
                            "Key": "department",
                            "Operation": "Replace",
                            "Default Value": department
                        }
                    ]
                }
            }
        if add_chat_history and custom_history:
            site_payload["chat_history"] = custom_history

        request_api_url = api_url or API_URL
        request_evaluate_api_url = evaluate_api_url or EVALUATE_API_URL

        response = requests.post(request_api_url, json=site_payload)
        if not response.ok:
            return f"L·ªói API: {response.text}"
        
        site_response = response.json()["text"]
        
        # Load human prompt for current site
        site_prompts = load_prompts_for_site(site or get_current_site())
        human_prompt_template = site_prompts["human_prompt"]
        
        # Format human prompt with actual values
        evaluate_human_prompt = human_prompt_template.format(
            question=question,
            level=level,
            department=department,
            true_answer=true_answer,
            agent_answer=site_response
        )
        
        evaluate_payload = {
            "question": "ƒê√°nh gi√° c√¢u tr·∫£ l·ªùi t·ª´ agent so v·ªõi c√¢u tr·∫£ l·ªùi chu·∫©n (true_answer)",
            "overrideConfig": {
                    "systemMessagePrompt": evaluate_system_prompt,
                    "humanMessagePrompt": evaluate_human_prompt
                }
        }
        evaluate_response = requests.post(request_evaluate_api_url, json=evaluate_payload)
        
        if not evaluate_response.ok:
            return f"L·ªói khi ƒë√°nh gi√° c√¢u tr·∫£ l·ªùi: {evaluate_response.text}"
        
        time.sleep(5)
        
        try:
            evaluate_json = evaluate_response.json()
            if "text" not in evaluate_json:
                return f"Response ƒë√°nh gi√° kh√¥ng c√≥ tr∆∞·ªùng 'text': {evaluate_json}"
            
            evaluate_response_text = evaluate_json["text"]
            if not evaluate_response_text:
                return "Response ƒë√°nh gi√° r·ªóng"
                
            # Import site-specific extract_section function
            import sys
            import importlib.util
            
            site = site or get_current_site()
            extract_path = get_extract_sections_path(site)
            
            if os.path.exists(extract_path):
                spec = importlib.util.spec_from_file_location("extract_sections", extract_path)
                extract_module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(extract_module)
                evaluate_result = extract_module.extract_section(evaluate_response_text)
            else:
                # Fallback to default extract_section
                evaluate_result = extract_section(evaluate_response_text)
                
            # ƒê·∫£m b·∫£o evaluate_result kh√¥ng ph·∫£i None
            if evaluate_result is None:
                evaluate_result = {"scores": {}, "comments": "L·ªói: Kh√¥ng th·ªÉ tr√≠ch xu·∫•t k·∫øt qu·∫£ ƒë√°nh gi√°"}
        except Exception as e:
            return f"L·ªói khi x·ª≠ l√Ω response ƒë√°nh gi√°: {str(e)}"

        return {
            "chat_id": chat_id,
            "question": question,
            "true_answer": true_answer,
            "level": level,
            "department": department,
            "site_response": site_response,
            "evaluate_result": evaluate_result,
        }
    except requests.exceptions.RequestException as e:
        return f"L·ªói API: {str(e)}"
    except Exception as e:
        return f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi {index + 1}: {str(e)}"

def process_questions_batch(questions, true_answers, levels, departments, add_chat_history=False, custom_history=None, test_name=None, is_scheduled=False, site=None, api_url=None, evaluate_api_url=None, progress_bar=None, status_text=None, current_question_text=None):
    results = []
    failed_questions = []
    
    # T·∫°o progress container v·ªõi styling ƒë·∫πp h∆°n (ch·ªâ khi kh√¥ng c√≥ progress bar t·ª´ b√™n ngo√†i)
    if not is_scheduled and progress_bar is None:
        progress_container = st.container()
        with progress_container:
            st.markdown("### ‚è≥ Ti·∫øn tr√¨nh x·ª≠ l√Ω")
            progress_bar = st.progress(0)
            status_text = st.empty()
            current_question_text = st.empty()
    elif is_scheduled:
        progress_container = None
        progress_bar = None
        status_text = None
        current_question_text = None
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = {executor.submit(process_single_question, q, ta, l, d, i, len(questions), add_chat_history, custom_history, site, api_url, evaluate_api_url): (q, ta, l, d) for i, (q, ta, l, d) in enumerate(zip(questions, true_answers, levels, departments))}
        
        completed_count = 0
        for i, future in enumerate(concurrent.futures.as_completed(futures)):
            question, true_answer, level, department = futures[future]
            completed_count += 1
            
            # C·∫≠p nh·∫≠t progress bar v√† th√¥ng b√°o
            if not is_scheduled and progress_bar and status_text and current_question_text:
                progress = completed_count / len(questions)
                progress_bar.progress(progress)
                status_text.text(f"üìä ƒê√£ x·ª≠ l√Ω: {completed_count}/{len(questions)} c√¢u h·ªèi ({progress*100:.1f}%)")
                
                # Hi·ªÉn th·ªã c√¢u h·ªèi ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω (r√∫t g·ªçn n·∫øu qu√° d√†i)
                display_question = question[:100] + "..." if len(question) > 100 else question
                current_question_text.text(f"üîÑ ƒêang x·ª≠ l√Ω: {display_question}")
            
            try:
                result = future.result()
                if isinstance(result, dict):
                    # Ki·ªÉm tra evaluate_result c√≥ t·ªìn t·∫°i v√† kh√¥ng ph·∫£i None
                    if (result.get("evaluate_result") and 
                        isinstance(result["evaluate_result"], dict) and 
                        result["evaluate_result"].get("scores") and
                        isinstance(result["evaluate_result"]["scores"], dict)):
                        
                        # Ki·ªÉm tra ti√™u ch√≠ fail
                        fail_criterion = st.session_state.get("fail_criterion", "accuracy")
                        fail_threshold = st.session_state.get("fail_threshold", 8.0)
                        criterion_score = result["evaluate_result"]["scores"].get(fail_criterion, 0)
                        
                        if criterion_score < fail_threshold:
                            result["failed_details"] = {
                                "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                "test_name": test_name,
                                "reason": f"{fail_criterion} th·∫•p (< {fail_threshold})",
                                "expected_output": result["true_answer"],
                                "actual_output": result["site_response"],
                                "scores": result["evaluate_result"]["scores"],
                                f"{fail_criterion}_score": criterion_score
                            }
                            failed_questions.append((question, f"{fail_criterion} th·∫•p", result))
                        results.append(result)
                    else:
                        # evaluate_result kh√¥ng h·ª£p l·ªá ho·∫∑c None
                        error_result = {
                            "chat_id": str(uuid4()), "question": question, "true_answer": true_answer,
                            "level": level, "department": department,
                            "site_response": result.get("site_response", "[L·ªói khi x·ª≠ l√Ω]"),
                            "evaluate_result": {"scores": {}, "comments": "L·ªói: evaluate_result kh√¥ng h·ª£p l·ªá"},
                            "failed_details": {"timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "test_name": test_name, "reason": "L·ªói evaluate_result", "error_message": "evaluate_result is None or invalid"}
                        }
                        results.append(error_result)
                        failed_questions.append((question, "L·ªói evaluate_result", "evaluate_result is None or invalid"))
                else:
                    error_result = {
                        "chat_id": str(uuid4()), "question": question, "true_answer": true_answer,
                        "level": level, "department": department,
                        "site_response": "[L·ªói khi x·ª≠ l√Ω]",
                        "evaluate_result": {"scores": {}, "comments": f"L·ªói: {result}"},
                        "failed_details": {"timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "test_name": test_name, "reason": "L·ªói x·ª≠ l√Ω API", "error_message": str(result)}
                    }
                    results.append(error_result)
                    failed_questions.append((question, "L·ªói x·ª≠ l√Ω API", result))
            except Exception as e:
                error_message = f"L·ªói: {str(e)}"
                error_result = {
                    "chat_id": str(uuid4()), "question": question, "true_answer": true_answer,
                    "level": level, "department": department,
                    "site_response": "[L·ªói khi x·ª≠ l√Ω]",
                    "evaluate_result": {"scores": {}, "comments": error_message},
                    "failed_details": {"timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "test_name": test_name, "reason": "Exception", "error_message": str(e)}
                }
                results.append(error_result)
                failed_questions.append((question, "Exception", str(e)))
    
    # Hi·ªÉn th·ªã th√¥ng b√°o ho√†n th√†nh
    if not is_scheduled and status_text and current_question_text:
        status_text.text(f"‚úÖ Ho√†n th√†nh: {len(questions)} c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω")
        current_question_text.text("üéâ T·∫•t c·∫£ c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!")

    if failed_questions and (is_scheduled or test_name):
        failed_results = [r for r in results if "failed_details" in r]
        if failed_results:
            save_failed_test_details(failed_results, site)
    
    return results, failed_questions

# T·∫£i l·ªãch s·ª≠ test, test case th·∫•t b·∫°i v√† l·ªãch s·ª≠ thay ƒë·ªïi

current_site = get_current_site()
site_paths = get_site_paths(current_site)
FAILED_TESTS_FILE = site_paths["failed_tests"]
TEST_HISTORY_FILE = site_paths["test_history"]
TEST_CHANGES_FILE = site_paths["test_changes"]

if os.path.exists(TEST_HISTORY_FILE):
    with open(TEST_HISTORY_FILE, "rb") as f:
        st.session_state.test_history[current_site] = pickle.load(f)
else:
    st.session_state.test_history[current_site] = []

if os.path.exists(FAILED_TESTS_FILE):
    with open(FAILED_TESTS_FILE, "rb") as f:
        st.session_state.failed_tests[current_site] = pickle.load(f)
else:
    st.session_state.failed_tests[current_site] = []

if os.path.exists(TEST_CHANGES_FILE):
    with open(TEST_CHANGES_FILE, "rb") as f:
        st.session_state.test_changes_history[current_site] = pickle.load(f)
else:
    st.session_state.test_changes_history[current_site] = []


SCHEDULED_TESTS_DIR = "scheduled_tests"
SCHEDULED_JOBS_FILE = os.path.join(SCHEDULED_TESTS_DIR, "scheduled_jobs.pkl")
os.makedirs(SCHEDULED_TESTS_DIR, exist_ok=True)

# Functions to save and load scheduled jobs
def save_scheduled_jobs():
    """Save scheduled jobs to file"""
    try:
        with open(SCHEDULED_JOBS_FILE, "wb") as f:
            pickle.dump(st.session_state.scheduled_jobs, f)
    except Exception as e:
        logger.error(f"L·ªói khi l∆∞u scheduled jobs: {str(e)}")

def load_scheduled_jobs():
    """Load scheduled jobs from file"""
    try:
        if os.path.exists(SCHEDULED_JOBS_FILE):
            with open(SCHEDULED_JOBS_FILE, "rb") as f:
                return pickle.load(f)
        return []
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i scheduled jobs: {str(e)}")
        return []

def get_scheduled_job_for_site(site):
    """Get scheduled job for a specific site"""
    if schedule_manager:
        return schedule_manager.get_schedule_config(site)
    return None

def remove_scheduled_job_for_site(site):
    """Remove scheduled job for a specific site"""
    st.session_state.scheduled_jobs = [job for job in st.session_state.scheduled_jobs if job.get('site') != site]
    save_scheduled_jobs()

# Initialize Persistent Schedule Manager (Global, thread-safe)
# Ch·ªâ kh·ªüi t·∫°o m·ªôt l·∫ßn, schedule manager s·∫Ω t·ª± load t·ª´ JSON
try:
    schedule_manager = get_schedule_manager()
    logger.info("Schedule Manager initialized successfully")
except Exception as e:
    logger.error(f"Error initializing Schedule Manager: {e}")
    schedule_manager = None

# T·∫°o c√°c tab
tab1, tab2, tab3, tab4, tab5 = st.tabs(["Test h√†ng lo·∫°t", "L·∫≠p l·ªãch test", "Qu·∫£n l√Ω test", "Qu·∫£n l√Ω Test Cases", "Qu·∫£n l√Ω Prompts"])

with tab3:
    st.subheader("Qu·∫£n l√Ω test v√† c·∫≠p nh·∫≠t t·∫≠p test")
    
    site = get_current_site()
    
    # Dashboard t·ªïng quan
    st.write("### üìä Dashboard T·ªïng Quan")
    
    if site in st.session_state.test_history and st.session_state.test_history[site]:
        # T√≠nh to√°n th·ªëng k√™ t·ªïng quan
        total_tests = len(st.session_state.test_history[site])
        total_questions = sum(test.get('num_questions', 0) for test in st.session_state.test_history[site])
        total_passed = sum(test.get('num_passed', 0) for test in st.session_state.test_history[site])
        total_failed = sum(test.get('num_failed', 0) for test in st.session_state.test_history[site])
        total_api_errors = sum(test.get('num_failed_api', 0) for test in st.session_state.test_history[site])
        total_extract_errors = sum(test.get('num_failed_extract', 0) for test in st.session_state.test_history[site])
        total_accuracy_errors = sum(test.get('num_failed_accuracy', 0) for test in st.session_state.test_history[site])
        
        overall_pass_rate = (total_passed / total_questions) * 100 if total_questions > 0 else 0
        api_error_rate = (total_api_errors / total_failed) * 100 if total_failed > 0 else 0
        
        # Dashboard v·ªõi HTML/CSS ƒë·∫πp h∆°n
        st.markdown("""
        <style>
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            color: white;
            text-align: center;
            margin: 5px;
        }
        .metric-card-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }
        .metric-card-danger {
            background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);
        }
        .metric-card-warning {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        .metric-card-info {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        .metric-label {
            font-size: 14px;
            font-weight: 500;
            opacity: 0.9;
            margin-bottom: 5px;
        }
        .metric-value {
            font-size: 32px;
            font-weight: bold;
            margin: 10px 0;
        }
        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 20px;
        }
        @media (max-width: 1200px) {
            .dashboard-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        @media (max-width: 600px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
        }
        </style>
        """, unsafe_allow_html=True)
        
        # Grid 1: Th·ªëng k√™ ch√≠nh
        st.markdown(f"""
        <div class="dashboard-grid">
            <div class="metric-card metric-card-info">
                <div class="metric-label">üìà T·ªïng s·ªë test</div>
                <div class="metric-value">{total_tests}</div>
            </div>
            <div class="metric-card metric-card-info">
                <div class="metric-label">‚ùì T·ªïng c√¢u h·ªèi</div>
                <div class="metric-value">{total_questions}</div>
            </div>
            <div class="metric-card metric-card-success">
                <div class="metric-label">‚úÖ T·ªïng passed</div>
                <div class="metric-value">{total_passed}</div>
            </div>
            <div class="metric-card metric-card-danger">
                <div class="metric-label">‚ùå T·ªïng failed</div>
                <div class="metric-value">{total_failed}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Grid 2: Ph√¢n lo·∫°i l·ªói v√† t·ª∑ l·ªá
        st.markdown(f"""
        <div class="dashboard-grid">
            <div class="metric-card">
                <div class="metric-label">üìä T·ª∑ l·ªá pass t·ªïng</div>
                <div class="metric-value">{overall_pass_rate:.1f}%</div>
            </div>
            <div class="metric-card metric-card-danger">
                <div class="metric-label">üî¥ API Errors</div>
                <div class="metric-value">{total_api_errors}</div>
            </div>
            <div class="metric-card metric-card-warning">
                <div class="metric-label">üü° Extract Errors</div>
                <div class="metric-value">{total_extract_errors}</div>
            </div>
            <div class="metric-card metric-card-warning">
                <div class="metric-label">üü† Accuracy Errors</div>
                <div class="metric-value">{total_accuracy_errors}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë l·ªói
        if total_failed > 0:
            st.write("### üìà Ph√¢n b·ªë l·ªói")
            error_data = {
                'Lo·∫°i l·ªói': ['API Error', 'Extract Error', 'Accuracy < 8'],
                'S·ªë l∆∞·ª£ng': [total_api_errors, total_extract_errors, total_accuracy_errors],
                'T·ª∑ l·ªá %': [
                    (total_api_errors / total_failed) * 100,
                    (total_extract_errors / total_failed) * 100,
                    (total_accuracy_errors / total_failed) * 100
                ]
            }
            error_df = pd.DataFrame(error_data)
            st.dataframe(error_df, use_container_width=True)
    else:
        # Empty state cho Dashboard
        st.markdown("""
        <div style="text-align: center; padding: 30px; background: #f8f9fa; border-radius: 10px; border: 2px dashed #ddd;">
            <h3 style="color: #999; margin-bottom: 10px;">üìä Dashboard s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y</h3>
            <p style="color: #666; font-size: 14px;">Sau khi b·∫°n ch·∫°y test, metrics v√† bi·ªÉu ƒë·ªì th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.write("---")  # Divider
    st.write("### üìã L·ªãch s·ª≠ test")
    if site in st.session_state.test_history and st.session_state.test_history[site]:
        history_df = pd.DataFrame(st.session_state.test_history[site])
        
        # Hi·ªÉn th·ªã dataframe v·ªõi kh·∫£ nƒÉng ch·ªçn d√≤ng
        selected_history = st.dataframe(
            history_df, 
            use_container_width=True,
            hide_index=True,
            on_select="rerun",
            selection_mode="single-row",
            key="history_selection"
        )
        
        # Hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£ n·∫øu c√≥ d√≤ng ƒë∆∞·ª£c ch·ªçn
        if selected_history.selection.rows:
            selected_row_index = selected_history.selection.rows[0]
            selected_test = st.session_state.test_history[site][selected_row_index]
            
            st.write("### Chi ti·∫øt k·∫øt qu·∫£ test")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("T√™n test", selected_test.get('test_name', 'N/A'))
                st.metric("S·ªë c√¢u h·ªèi", selected_test.get('num_questions', 0))
            
            with col2:
                st.metric("‚úÖ Passed", selected_test.get('num_passed', 0))
                st.metric("‚ùå Failed", selected_test.get('num_failed', 0))
            
            with col3:
                st.metric("Th·ªùi gian", selected_test.get('timestamp', 'N/A'))
                pass_rate = (selected_test.get('num_passed', 0) / selected_test.get('num_questions', 1)) * 100
                st.metric("T·ª∑ l·ªá pass", f"{pass_rate:.1f}%")
            
            # Hi·ªÉn th·ªã ph√¢n lo·∫°i l·ªói chi ti·∫øt
            st.write("### üìä Ph√¢n lo·∫°i l·ªói chi ti·∫øt")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üî¥ API Error", selected_test.get('num_failed_api', 0))
            with col2:
                st.metric("üü° Extract Error", selected_test.get('num_failed_extract', 0))
            with col3:
                st.metric("üü† Accuracy < 8", selected_test.get('num_failed_accuracy', 0))
            with col4:
                total_failed = selected_test.get('num_failed', 0)
                if total_failed > 0:
                    api_rate = (selected_test.get('num_failed_api', 0) / total_failed) * 100
                    st.metric("API Error %", f"{api_rate:.1f}%")
            
            # Hi·ªÉn th·ªã file k·∫øt qu·∫£ n·∫øu c√≥
            if 'filename' in selected_test:
                st.write("### File k·∫øt qu·∫£")
                result_file_path = os.path.join(RESULTS_DIR, site, selected_test['filename'])
                
                if os.path.exists(result_file_path):
                    try:
                        result_df = pd.read_excel(result_file_path)
                        st.write(f"**File:** `{selected_test['filename']}` ({len(result_df)} d√≤ng)")
                        
                        # Hi·ªÉn th·ªã preview 10 d√≤ng ƒë·∫ßu ti√™n
                        st.write("**Preview k·∫øt qu·∫£:**")
                        st.dataframe(result_df.head(10), use_container_width=True)
                        
                        # N√∫t t·∫£i xu·ªëng
                        with open(result_file_path, "rb") as f:
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng file k·∫øt qu·∫£",
                                data=f.read(),
                                file_name=selected_test['filename'],
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key=f"download_{selected_test['timestamp']}"
                            )
                        
                        # Hi·ªÉn th·ªã b·∫£ng c√°c c√¢u fail v·ªõi ph√¢n lo·∫°i
                        st.write("### üîç Chi ti·∫øt c√°c c√¢u fail")
                        
                        # ƒê·ªçc file k·∫øt qu·∫£ ƒë·ªÉ l·∫•y chi ti·∫øt
                        try:
                            result_df = pd.read_excel(result_file_path)
                            
                            # T·∫°o b·∫£ng fail v·ªõi ph√¢n lo·∫°i
                            failed_rows = []
                            for idx, row in result_df.iterrows():
                                if 'failed_details' in str(row.to_dict()):
                                    # Parse failed_details t·ª´ string n·∫øu c·∫ßn
                                    failed_details = row.get('failed_details', {})
                                    if isinstance(failed_details, str):
                                        try:
                                            import ast
                                            failed_details = ast.literal_eval(failed_details)
                                        except:
                                            failed_details = {}
                                    
                                    reason = failed_details.get('reason', 'Unknown')
                                    error_type = "üî¥ API Error" if "API" in reason or "Exception" in reason else \
                                               "üü° Extract Error" if "evaluate_result" in reason else \
                                               "üü† Accuracy < 8" if "Accuracy" in reason else "‚ùì Unknown"
                                    
                                    failed_rows.append({
                                        'C√¢u h·ªèi': row.get('question', 'N/A')[:100] + '...' if len(str(row.get('question', ''))) > 100 else row.get('question', 'N/A'),
                                        'Lo·∫°i l·ªói': error_type,
                                        'L√Ω do': reason,
                                        'Accuracy': row.get('accuracy', 0) if 'accuracy' in str(row) else 'N/A',
                                        'Average': row.get('average', 0) if 'average' in str(row) else 'N/A'
                                    })
                            
                            if failed_rows:
                                failed_df = pd.DataFrame(failed_rows)
                                st.dataframe(failed_df, use_container_width=True)
                            else:
                                st.info("Kh√¥ng c√≥ c√¢u n√†o fail trong test n√†y")
                                
                        except Exception as e:
                            st.error(f"L·ªói khi ƒë·ªçc chi ti·∫øt fail: {str(e)}")
                            
                    except Exception as e:
                        st.error(f"L·ªói khi ƒë·ªçc file k·∫øt qu·∫£: {str(e)}")
                else:
                    st.warning("File k·∫øt qu·∫£ kh√¥ng t·ªìn t·∫°i")
    else:
        # Empty state v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
        st.markdown("""
        <div style="text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%); border-radius: 10px; margin: 20px 0;">
            <h2 style="color: #667eea; margin-bottom: 20px;">üìä Ch∆∞a c√≥ l·ªãch s·ª≠ test</h2>
            <p style="font-size: 16px; color: #666; margin-bottom: 30px;">
                ƒê·ªÉ xem dashboard v√† l·ªãch s·ª≠ test, b·∫°n c·∫ßn ch·∫°y test tr∆∞·ªõc.
            </p>
            <div style="text-align: left; max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <h4 style="color: #333; margin-bottom: 15px;">üöÄ H∆∞·ªõng d·∫´n nhanh:</h4>
                <ol style="color: #555; line-height: 1.8;">
                    <li><strong>V√†o Tab "Test h√†ng lo·∫°t"</strong> ·ªü ph√≠a tr√™n</li>
                    <li>Upload file Excel ch·ª©a c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi chu·∫©n</li>
                    <li>Ch·ªçn c√°c c√¢u h·ªèi mu·ªën test</li>
                    <li>Nh·∫•n n√∫t <strong>"‚ñ∂Ô∏è Ch·∫°y test"</strong></li>
                    <li>Quay l·∫°i tab n√†y ƒë·ªÉ xem k·∫øt qu·∫£ v√† th·ªëng k√™</li>
                </ol>
            </div>
            <p style="margin-top: 30px; color: #888; font-size: 14px;">
                üí° Tip: B·∫°n c≈©ng c√≥ th·ªÉ l·∫≠p l·ªãch test t·ª± ƒë·ªông ·ªü Tab "L·∫≠p l·ªãch test"
            </p>
        </div>
        """, unsafe_allow_html=True)
        
    # st.write("### Test cases th·∫•t b·∫°i")
    # if site in st.session_state.failed_tests and st.session_state.failed_tests[site]:
    #     failed_df = pd.DataFrame(st.session_state.failed_tests[site])
        
    #     # Hi·ªÉn th·ªã dataframe v·ªõi kh·∫£ nƒÉng ch·ªçn d√≤ng
    #     selected_failed = st.dataframe(
    #         failed_df, 
    #         use_container_width=True,
    #         hide_index=True,
    #         on_select="rerun",
    #         selection_mode="single-row",
    #         key="failed_selection"
    #     )
        
    #     # Hi·ªÉn th·ªã chi ti·∫øt test case th·∫•t b·∫°i n·∫øu c√≥ d√≤ng ƒë∆∞·ª£c ch·ªçn
    #     if selected_failed.selection.rows:
    #         selected_row_index = selected_failed.selection.rows[0]
    #         selected_failed_test = st.session_state.failed_tests[site][selected_row_index]
            
    #         st.write("### Chi ti·∫øt test case th·∫•t b·∫°i")
            
    #         # Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
    #         col1, col2 = st.columns(2)
            
    #         with col1:
    #             st.write("**Th√¥ng tin test:**")
    #             st.write(f"- **C√¢u h·ªèi:** {selected_failed_test.get('question', 'N/A')}")
    #             st.write(f"- **Level:** {selected_failed_test.get('level', 'N/A')}")
    #             st.write(f"- **Department:** {selected_failed_test.get('department', 'N/A')}")
    #             st.write(f"- **Chat ID:** {selected_failed_test.get('chat_id', 'N/A')}")
            
    #         with col2:
    #             st.write("**K·∫øt qu·∫£ ƒë√°nh gi√°:**")
    #             scores = selected_failed_test.get('evaluate_result', {}).get('scores', {})
    #             for metric, score in scores.items():
    #                 st.write(f"- **{metric}:** {score}")
            
    #         # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
    #         st.write("**C√¢u tr·∫£ l·ªùi chu·∫©n:**")
    #         st.text_area("True Answer", value=selected_failed_test.get('true_answer', ''), height=100, disabled=True)
            
    #         st.write("**C√¢u tr·∫£ l·ªùi t·ª´ Agent:**")
    #         st.text_area("Agent Answer", value=selected_failed_test.get('site_response', ''), height=100, disabled=True)
            
    #         # Hi·ªÉn th·ªã nh·∫≠n x√©t
    #         comments = selected_failed_test.get('evaluate_result', {}).get('comments', '')
    #         if comments:
    #             st.write("**Nh·∫≠n x√©t v√† g√≥p √Ω:**")
    #             st.text_area("Comments", value=comments, height=100, disabled=True)
            
    #         # Hi·ªÉn th·ªã th√¥ng tin l·ªói n·∫øu c√≥
    #         failed_details = selected_failed_test.get('failed_details', {})
    #         if failed_details:
    #             st.write("**Chi ti·∫øt l·ªói:**")
    #             st.write(f"- **Th·ªùi gian:** {failed_details.get('timestamp', 'N/A')}")
    #             st.write(f"- **T√™n test:** {failed_details.get('test_name', 'N/A')}")
    #             st.write(f"- **L√Ω do:** {failed_details.get('reason', 'N/A')}")
    #             if 'error_message' in failed_details:
    #                 st.write(f"- **Th√¥ng b√°o l·ªói:** {failed_details['error_message']}")
    # else:
    #     st.info("Ch∆∞a c√≥ test case th·∫•t b·∫°i n√†o")

    # st.write("### K·∫øt qu·∫£ ƒë√£ l∆∞u")
    # site_results_dir = os.path.join(RESULTS_DIR, site)
    # if os.path.exists(site_results_dir):
    #     try:
    #         all_files = [f for f in os.listdir(site_results_dir) if f.lower().endswith((".xlsx", ".xls"))]
    #     except Exception as e:
    #         all_files = []
    #         st.error(f"L·ªói khi li·ªát k√™ file k·∫øt qu·∫£: {str(e)}")

    #     if all_files:
    #         selected_file = st.selectbox("Ch·ªçn file k·∫øt qu·∫£ ƒë·ªÉ xem", sorted(all_files, reverse=True), key="saved_result_select")
    #         selected_path = os.path.join(site_results_dir, selected_file)
    #         cols = st.columns([1, 1])
    #         with cols[0]:
    #             if st.button("Xem preview 5 d√≤ng ƒë·∫ßu", key="preview_saved_result"):
    #                 try:
    #                     df_saved = pd.read_excel(selected_path)
    #                     st.write(f"File: `{selected_file}` ({len(df_saved)} d√≤ng)")
    #                     st.dataframe(df_saved.head(5), use_container_width=True)
    #                 except Exception as e:
    #                     st.error(f"L·ªói khi ƒë·ªçc file k·∫øt qu·∫£: {str(e)}")
    #         with cols[1]:
    #             try:
    #                 with open(selected_path, "rb") as f:
    #                     st.download_button(
    #                         label="T·∫£i xu·ªëng file k·∫øt qu·∫£",
    #                         data=f.read(),
    #                         file_name=selected_file,
    #                         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    #                         key="download_saved_result"
    #                     )
    #             except Exception as e:
    #                 st.error(f"L·ªói khi m·ªü file ƒë·ªÉ t·∫£i xu·ªëng: {str(e)}")
    #     else:
    #         st.info("Ch∆∞a c√≥ file k·∫øt qu·∫£ n√†o ƒë∆∞·ª£c l∆∞u cho site n√†y.")
    # else:
    #     st.info("Th∆∞ m·ª•c k·∫øt qu·∫£ cho site n√†y ch∆∞a ƒë∆∞·ª£c t·∫°o.")

with tab4:
    st.subheader("üìã Qu·∫£n l√Ω Test Cases")
    
    site = get_current_site()
    st.write(f"**Site hi·ªán t·∫°i:** {site}")
    
    # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥
    if 'test_cases_action_message' in st.session_state:
        msg_type = st.session_state.test_cases_action_message.get('type', 'info')
        msg_text = st.session_state.test_cases_action_message.get('text', '')
        
        if msg_type == 'success':
            st.success(msg_text)
        elif msg_type == 'error':
            st.error(msg_text)
        elif msg_type == 'warning':
            st.warning(msg_text)
        else:
            st.info(msg_text)
        
        # Clear message sau khi hi·ªÉn th·ªã
        del st.session_state.test_cases_action_message
    
    # Upload v√† ch·ªânh s·ª≠a test cases
    st.write("### üì§ Upload v√† ch·ªânh s·ª≠a Test Cases")
    
    uploaded_file = st.file_uploader("Ch·ªçn file Excel ch·ª©a test cases", type=['xlsx', 'xls'], key="test_cases_uploader")
    
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            
            # Ki·ªÉm tra file r·ªóng
            if df.empty:
                st.error("‚ùå File Excel r·ªóng! Vui l√≤ng t·∫£i l√™n file c√≥ d·ªØ li·ªáu.")
            else:
                # Ki·ªÉm tra c√≥ √≠t nh·∫•t 4 c·ªôt (c√¢u h·ªèi, c√¢u tr·∫£ l·ªùi chu·∫©n, level, department)
                if len(df.columns) < 4:
                    st.error("‚ùå File Excel ph·∫£i c√≥ √≠t nh·∫•t 4 c·ªôt (C√¢u h·ªèi, C√¢u tr·∫£ l·ªùi chu·∫©n, Level, Department)!")
                else:
                    # L·∫•y 4 c·ªôt ƒë·∫ßu ti√™n
                    questions = df.iloc[:, 0].tolist()
                    true_answers = df.iloc[:, 1].tolist()
                    levels = df.iloc[:, 2].tolist()
                    departments = df.iloc[:, 3].tolist()
                    
                    # Lo·∫°i b·ªè c√°c d√≤ng c√≥ d·ªØ li·ªáu r·ªóng
                    valid_data = []
                    for q, ta, l, d in zip(questions, true_answers, levels, departments):
                        if pd.notna(q) and pd.notna(ta) and pd.notna(l) and pd.notna(d) and \
                           str(q).strip() and str(ta).strip() and str(l).strip() and str(d).strip():
                            valid_data.append({
                                'C√¢u h·ªèi': str(q).strip(), 
                                'C√¢u tr·∫£ l·ªùi chu·∫©n': str(ta).strip(),
                                'Level': str(l).strip(),
                                'Department': str(d).strip()
                            })
                    
                    if not valid_data:
                        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong file!")
                    else:
                        # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu h·ª£p l·ªá
                        test_cases_df = pd.DataFrame(valid_data)
                        
                        st.write("### üìù Ch·ªânh s·ª≠a Test Cases")
                        st.info("üí° B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a tr·ª±c ti·∫øp trong b·∫£ng d∆∞·ªõi ƒë√¢y. Th√™m/x√≥a d√≤ng b·∫±ng c√°c n√∫t b√™n d∆∞·ªõi.")
                        
                        # S·ª≠ d·ª•ng st.data_editor ƒë·ªÉ ch·ªânh s·ª≠a
                        edited_df = st.data_editor(
                            test_cases_df,
                            use_container_width=True,
                            hide_index=True,
                            num_rows="dynamic",
                            column_config={
                                "C√¢u h·ªèi": st.column_config.TextColumn(
                                    "C√¢u h·ªèi",
                                    help="N·ªôi dung c√¢u h·ªèi",
                                    width="large",
                                    required=True
                                ),
                                "C√¢u tr·∫£ l·ªùi chu·∫©n": st.column_config.TextColumn(
                                    "C√¢u tr·∫£ l·ªùi chu·∫©n",
                                    help="C√¢u tr·∫£ l·ªùi m·∫´u ƒë·ªÉ so s√°nh",
                                    width="large",
                                    required=True
                                ),
                                "Level": st.column_config.TextColumn(
                                    "Level",
                                    help="C·∫•p ƒë·ªô c√¢u h·ªèi",
                                    width="medium",
                                    required=True
                                ),
                                "Department": st.column_config.TextColumn(
                                    "Department",
                                    help="Ph√≤ng ban li√™n quan",
                                    width="medium",
                                    required=True
                                ),
                            },
                            key="test_cases_editor"
                        )
                        
                        # N√∫t l∆∞u test cases
                        col1, col2 = st.columns([1, 3])
                        
                        with col1:
                            if st.button("üíæ L∆∞u Test Cases", type="primary", use_container_width=True):
                                filepath = save_test_cases(site, edited_df)
                                if filepath:
                                    st.session_state.test_cases_action_message = {
                                        'type': 'success',
                                        'text': f'‚úÖ ƒê√£ l∆∞u test cases cho site "{site}" th√†nh c√¥ng!'
                                    }
                                else:
                                    st.session_state.test_cases_action_message = {
                                        'type': 'error',
                                        'text': '‚ùå L·ªói khi l∆∞u test cases!'
                                    }
                                st.rerun()
                        
                        with col2:
                            st.metric("üìä S·ªë test cases", len(edited_df))
        
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {str(e)}")
    
    # Hi·ªÉn th·ªã test cases hi·ªán t·∫°i
    st.write("### üìö Test Cases hi·ªán t·∫°i")
    
    if test_cases_exists(site):
        # Load test cases
        test_cases_df = load_test_cases(site)
        
        if test_cases_df is not None:
            # Ki·ªÉm tra xem c√≥ ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a kh√¥ng
            editing_mode = st.session_state.get('editing_test_cases', False)
            
            if not editing_mode:
                # Ch·∫ø ƒë·ªô xem
                st.write(f"**S·ªë test cases:** {len(test_cases_df)}")
                
                # Hi·ªÉn th·ªã preview
                st.dataframe(test_cases_df.head(10), use_container_width=True)
                
                if len(test_cases_df) > 10:
                    st.caption(f"Hi·ªÉn th·ªã 10/{len(test_cases_df)} test cases ƒë·∫ßu ti√™n")
                
                # C√°c n√∫t action
                col1, col2, col3 = st.columns([1, 1, 1])
                
                with col1:
                    if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a", key="edit_test_cases_btn", type="primary", use_container_width=True):
                        st.session_state.editing_test_cases = True
                        st.rerun()
                
                with col2:
                    # N√∫t t·∫£i xu·ªëng
                    try:
                        filepath = get_test_cases_file_path(site)
                        with open(filepath, "rb") as f:
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng",
                                data=f.read(),
                                file_name=f"{site}_test_cases.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                key="download_test_cases",
                                use_container_width=True
                            )
                    except Exception as e:
                        st.error(f"L·ªói khi t·∫£i xu·ªëng file: {str(e)}")
                
                with col3:
                    if st.button("üóëÔ∏è X√≥a", key="delete_test_cases_btn", type="secondary", use_container_width=True):
                        if delete_test_cases(site):
                            st.session_state.test_cases_action_message = {
                                'type': 'success',
                                'text': f'‚úÖ ƒê√£ x√≥a test cases cho site "{site}"'
                            }
                        else:
                            st.session_state.test_cases_action_message = {
                                'type': 'error',
                                'text': '‚ùå L·ªói khi x√≥a test cases!'
                            }
                        st.rerun()
            
            else:
                # Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
                st.info("üí° B·∫°n ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a. Th√™m/x√≥a/s·ª≠a d√≤ng tr·ª±c ti·∫øp trong b·∫£ng d∆∞·ªõi ƒë√¢y.")
                
                # S·ª≠ d·ª•ng st.data_editor ƒë·ªÉ ch·ªânh s·ª≠a
                edited_df = st.data_editor(
                    test_cases_df,
                    use_container_width=True,
                    hide_index=True,
                    num_rows="dynamic",
                    column_config={
                        test_cases_df.columns[0]: st.column_config.TextColumn(
                            test_cases_df.columns[0],
                            help="N·ªôi dung c√¢u h·ªèi",
                            width="large",
                            required=True
                        ),
                        test_cases_df.columns[1]: st.column_config.TextColumn(
                            test_cases_df.columns[1],
                            help="C√¢u tr·∫£ l·ªùi m·∫´u ƒë·ªÉ so s√°nh",
                            width="large",
                            required=True
                        ),
                        test_cases_df.columns[2]: st.column_config.TextColumn(
                            test_cases_df.columns[2],
                            help="C·∫•p ƒë·ªô c√¢u h·ªèi",
                            width="medium",
                            required=True
                        ),
                        test_cases_df.columns[3]: st.column_config.TextColumn(
                            test_cases_df.columns[3],
                            help="Ph√≤ng ban li√™n quan",
                            width="medium",
                            required=True
                        ),
                    },
                    key="edit_existing_test_cases_editor"
                )
                
                # N√∫t l∆∞u v√† h·ªßy
                col1, col2, col3 = st.columns([1, 1, 4])
                
                with col1:
                    if st.button("üíæ L∆∞u", type="primary", use_container_width=True, key="save_edited_test_cases"):
                        filepath = save_test_cases(site, edited_df)
                        if filepath:
                            st.session_state.test_cases_action_message = {
                                'type': 'success',
                                'text': f'‚úÖ ƒê√£ c·∫≠p nh·∫≠t test cases cho site "{site}" th√†nh c√¥ng!'
                            }
                            st.session_state.editing_test_cases = False
                        else:
                            st.session_state.test_cases_action_message = {
                                'type': 'error',
                                'text': '‚ùå L·ªói khi l∆∞u test cases!'
                            }
                        st.rerun()
                
                with col2:
                    if st.button("‚ùå H·ªßy", use_container_width=True, key="cancel_edit_test_cases"):
                        st.session_state.editing_test_cases = False
                        st.rerun()
                
                with col3:
                    st.metric("üìä S·ªë test cases", len(edited_df))
    else:
        # Empty state v·ªõi h∆∞·ªõng d·∫´n chi ti·∫øt
        st.markdown("""
        <div style="text-align: center; padding: 40px 20px; background: linear-gradient(135deg, #667eea15 0%, #764ba215 100%); border-radius: 10px; margin: 20px 0;">
            <h2 style="color: #667eea; margin-bottom: 20px;">üìö Ch∆∞a c√≥ Test Cases</h2>
            <p style="font-size: 16px; color: #666; margin-bottom: 30px;">
                Test cases gi√∫p b·∫°n qu·∫£n l√Ω v√† t√°i s·ª≠ d·ª•ng b·ªô c√¢u h·ªèi test.
            </p>
            <div style="text-align: left; max-width: 600px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                <h4 style="color: #333; margin-bottom: 15px;">üéØ ƒê·ªÉ t·∫°o Test Cases:</h4>
                <ol style="color: #555; line-height: 1.8;">
                    <li>Cu·ªôn l√™n ph√≠a tr√™n tab n√†y</li>
                    <li>T√¨m ph·∫ßn <strong>"üì§ Upload v√† ch·ªânh s·ª≠a Test Cases"</strong></li>
                    <li>Upload file Excel ch·ª©a test cases (4 c·ªôt: C√¢u h·ªèi, C√¢u tr·∫£ l·ªùi chu·∫©n, Level, Department)</li>
                    <li>Ch·ªânh s·ª≠a n·∫øu c·∫ßn thi·∫øt</li>
                    <li>ƒê·∫∑t t√™n v√† nh·∫•n <strong>"üíæ L∆∞u Test Cases"</strong></li>
                </ol>
                <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-left: 4px solid #667eea; border-radius: 4px;">
                    <strong style="color: #667eea;">üí° L·ª£i √≠ch:</strong><br>
                    <span style="color: #666; font-size: 14px;">
                        ‚Ä¢ D·ªÖ d√†ng ch·ªçn test cases cho l·∫≠p l·ªãch test t·ª± ƒë·ªông<br>
                        ‚Ä¢ Qu·∫£n l√Ω nhi·ªÅu b·ªô test kh√°c nhau<br>
                        ‚Ä¢ T√°i s·ª≠ d·ª•ng test cases cho nhi·ªÅu l·∫ßn ch·∫°y
                    </span>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)

with tab5:
    # Custom CSS cho tab Qu·∫£n l√Ω Prompts
    st.markdown("""
    <style>
    /* Styling cho buttons */
    .stButton > button {
        border-radius: 8px;
        font-weight: 500;
        transition: all 0.3s ease;
        border: 1px solid #e0e0e0;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    /* Styling cho text areas */
    .stTextArea textarea {
        border-radius: 8px;
        border: 2px solid #e0e0e0;
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        font-size: 13px;
    }
    
    .stTextArea textarea:focus {
        border-color: #4CAF50;
        box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
    }
    
    /* Spacing cho columns */
    .row-widget.stHorizontal {
        gap: 15px;
    }
    
    /* Styling cho headers */
    h3 {
        color: #1f77b4;
        border-bottom: 2px solid #1f77b4;
        padding-bottom: 8px;
        margin-top: 20px;
    }
    
    /* Card-like containers */
    .stExpander {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 10px;
    }
    
    /* Info boxes */
    .stAlert {
        border-radius: 8px;
    }
    
    /* Dataframe styling */
    .dataframe {
        border-radius: 8px;
        overflow: hidden;
    }
    
    /* Button container spacing */
    div[data-testid="column"] {
        padding: 5px;
    }
    
    /* Primary button highlight */
    .stButton > button[kind="primary"] {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
    }
    
    .stButton > button[kind="primary"]:hover {
        background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.subheader("Qu·∫£n l√Ω Prompts v√† Extract Sections")
    
    site = get_current_site()
    st.write(f"**Site hi·ªán t·∫°i:** {site}")
    
    # Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu c√≥ trong session state
    if 'prompt_action_message' in st.session_state:
        msg_type = st.session_state.prompt_action_message.get('type', 'info')
        msg_text = st.session_state.prompt_action_message.get('text', '')
        
        if msg_type == 'success':
            st.success(msg_text)
        elif msg_type == 'error':
            st.error(msg_text)
        elif msg_type == 'warning':
            st.warning(msg_text)
        else:
            st.info(msg_text)
        
        # Clear message sau khi hi·ªÉn th·ªã
        del st.session_state.prompt_action_message
    
    # Load current prompts - Force reload n·∫øu c√≥ flag reset
    if 'force_reload_prompts' in st.session_state and st.session_state.force_reload_prompts:
        # Clear text area keys ƒë·ªÉ force reload
        if 'system_prompt_editor' in st.session_state:
            del st.session_state.system_prompt_editor
        if 'human_prompt_editor' in st.session_state:
            del st.session_state.human_prompt_editor
        st.session_state.force_reload_prompts = False
    
    prompts = load_prompts_for_site(site)
    
    current_extract_code = load_extract_sections_for_site(site)
    
    # Prompt Management Section
    st.write("### üìù Qu·∫£n l√Ω Prompts")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**System Prompt**")
        system_prompt = st.text_area(
            "System Prompt", 
            value=prompts["system_prompt"], 
            height=300,
            key="system_prompt_editor"
        )
    
    with col2:
        st.write("**Human Prompt**")
        human_prompt = st.text_area(
            "Human Prompt", 
            value=prompts["human_prompt"], 
            height=300,
            key="human_prompt_editor"
        )
    
    # Save/Backup/Reset buttons - x·ª≠ l√Ω c·∫£ prompts v√† extract sections
    st.write("")  # Spacing
    col1, col2, col3, col4 = st.columns([1, 1, 1, 2])
    with col1:
        if st.button("üíæ L∆∞u", key="save_all", use_container_width=True, help="L∆∞u c·∫£ Prompts v√† Extract Sections"):
            success_prompts = save_prompts_for_site(site, system_prompt, human_prompt)
            
            # T·ª± ƒë·ªông sinh v√† l∆∞u extract sections t·ª´ system prompt
            if system_prompt:
                result = auto_generate_extract_sections_from_prompt(system_prompt)
                if result and result.get('code'):
                    success_extract = save_extract_sections_for_site(site, result['code'])
                else:
                    success_extract = False
            else:
                success_extract = True  # Kh√¥ng c√≥ l·ªói n·∫øu kh√¥ng c√≥ prompt
            
            # Refresh criteria t·ª´ system prompt m·ªõi
            if system_prompt:
                st.session_state.current_system_prompt = system_prompt
                # C·∫≠p nh·∫≠t fail_criterion n·∫øu c·∫ßn
                new_criteria = get_criteria_from_prompt(system_prompt)
                current_criterion = st.session_state.get("fail_criterion", "accuracy")
                if current_criterion not in new_criteria and new_criteria:
                    st.session_state.fail_criterion = new_criteria[0]
            
            if success_prompts and success_extract:
                st.session_state.prompt_action_message = {
                    'type': 'success',
                    'text': '‚úÖ ƒê√£ l∆∞u prompts & extract sections! Criteria ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.'
                }
            elif success_prompts:
                st.session_state.prompt_action_message = {
                    'type': 'warning',
                    'text': '‚ö†Ô∏è ƒê√£ l∆∞u prompts nh∆∞ng c√≥ l·ªói khi l∆∞u extract sections!'
                }
            else:
                st.session_state.prompt_action_message = {
                    'type': 'error',
                    'text': '‚ùå L·ªói khi l∆∞u!'
                }
            time.sleep(0.5)  # Delay nh·ªè ƒë·ªÉ user th·∫•y button ƒë∆∞·ª£c click
            st.rerun()
    
    with col2:
        if st.button("üì¶ Backup", key="backup_all", use_container_width=True, help="Backup c·∫£ Prompts v√† Extract Sections"):
            success_prompts = backup_prompts_for_site(site)
            success_extract = backup_extract_sections_for_site(site)
            
            if success_prompts and success_extract:
                st.session_state.prompt_action_message = {
                    'type': 'success',
                    'text': f'‚úÖ ƒê√£ backup prompts & extract sections!\nüí° Backup ƒë∆∞·ª£c l∆∞u t·∫°i: backup_prompts/{site}/'
                }
            elif success_prompts or success_extract:
                st.session_state.prompt_action_message = {
                    'type': 'warning',
                    'text': '‚ö†Ô∏è ƒê√£ backup m·ªôt ph·∫ßn, vui l√≤ng ki·ªÉm tra!'
                }
            else:
                st.session_state.prompt_action_message = {
                    'type': 'error',
                    'text': '‚ùå L·ªói khi backup!'
                }
            time.sleep(0.5)
            st.rerun()
    
    with col3:
        if st.button("üîÑ Reset", key="reset_all", use_container_width=True, help="Reset c·∫£ Prompts v√† Extract Sections"):
            # Restore prompts
            result_prompts = restore_prompts_from_backup(site)
            # Restore extract sections
            result_extract = restore_extract_sections_from_backup(site)
            
            # Set flag ƒë·ªÉ force reload prompts
            st.session_state.force_reload_prompts = True
            
            if result_prompts == "backup" and result_extract == "backup":
                st.session_state.prompt_action_message = {
                    'type': 'success',
                    'text': '‚úÖ ƒê√£ reset t·ª´ backup!'
                }
            elif result_prompts == "original" or result_extract == "original":
                st.session_state.prompt_action_message = {
                    'type': 'info',
                    'text': 'üìÑ ƒê√£ reset (m·ªôt ph·∫ßn t·ª´ backup, m·ªôt ph·∫ßn t·ª´ original)!'
                }
            elif result_prompts and result_extract:
                st.session_state.prompt_action_message = {
                    'type': 'success',
                    'text': '‚úÖ ƒê√£ reset th√†nh c√¥ng!'
                }
            else:
                st.session_state.prompt_action_message = {
                    'type': 'warning',
                    'text': '‚ö†Ô∏è Kh√¥ng th·ªÉ reset. Vui l√≤ng ki·ªÉm tra backup ho·∫∑c original_prompts'
                }
            time.sleep(0.5)
            st.rerun()
    
    st.write("")  # Spacing
    
    # Extract Sections Management Section
    st.write("### üîß Preview Extract Sections")
    # st.info("üí° Extract sections s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c t·∫°o v√† l∆∞u khi b·∫°n nh·∫•n n√∫t **üíæ L∆∞u** ·ªü tr√™n")
    
    # T·ª± ƒë·ªông ph√¢n t√≠ch prompt v√† hi·ªÉn th·ªã mapping
    if system_prompt:
        # T·ª± ƒë·ªông ph√¢n t√≠ch prompt hi·ªán t·∫°i
        result = auto_generate_extract_sections_from_prompt(system_prompt)
        
        # Hi·ªÉn th·ªã mapping preview
        st.write("**Mapping s·∫Ω ƒë∆∞·ª£c t·∫°o t·ª´ System Prompt:**")
        
        # Hi·ªÉn th·ªã mapping table
        if result and result.get('normalized_criteria'):
            mapping_data = []
            for i, criterion in enumerate(result['normalized_criteria']):
                original_criterion = result['criteria'][i] if i < len(result['criteria']) else criterion
                description = result['descriptions'][i] if i < len(result['descriptions']) else ""
                
                # N·∫øu kh√¥ng c√≥ description t·ª´ prompt, d√πng m√¥ t·∫£ m·∫∑c ƒë·ªãnh
                if not description:
                    if 'relevance' in criterion:
                        description = 'M·ª©c ƒë·ªô li√™n quan ƒë·∫øn c√¢u h·ªèi'
                    elif 'accuracy' in criterion:
                        description = 'ƒê·ªô ch√≠nh x√°c c·ªßa th√¥ng tin'
                    elif 'completeness' in criterion:
                        description = 'T√≠nh ƒë·∫ßy ƒë·ªß c·ªßa c√¢u tr·∫£ l·ªùi'
                    elif 'access_control' in criterion:
                        description = 'Ki·ªÉm so√°t truy c·∫≠p v√† b·∫£o m·∫≠t'
                    elif 'clarity' in criterion:
                        description = 'T√≠nh r√µ r√†ng v√† d·ªÖ hi·ªÉu'
                    elif 'tone' in criterion:
                        description = 'Gi·ªçng ƒëi·ªáu v√† th√°i ƒë·ªô'
                    else:
                        description = 'Ti√™u ch√≠ kh√°c'
                
                mapping_data.append({
                    'Ti√™u ch√≠ trong Prompt': original_criterion,
                    'Key trong JSON': criterion,
                    'M√¥ t·∫£': description
                })
            
            mapping_df = pd.DataFrame(mapping_data)
            st.dataframe(mapping_df, use_container_width=True)
            
            # Hi·ªÉn th·ªã preview code
            with st.expander("üëÅÔ∏è Xem preview Extract Sections code", expanded=False):
                st.code(result['code'], language='python')
        else:
            st.warning("Kh√¥ng t√¨m th·∫•y ti√™u ch√≠ n√†o trong System Prompt")
    else:
        st.info("‚ö†Ô∏è Vui l√≤ng nh·∫≠p System Prompt ƒë·ªÉ xem preview Extract Sections")
    
    # Preview Section
    st.write("### üëÅÔ∏è Preview")
    
    with st.container():
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**System Prompt Preview**")
            if system_prompt:
                preview_text = system_prompt[:500] + "..." if len(system_prompt) > 500 else system_prompt
                st.text_area("Preview", value=preview_text, height=150, disabled=True, key="system_preview", label_visibility="collapsed")
                st.caption(f"üìù {len(system_prompt)} k√Ω t·ª±")
            else:
                st.info("Ch∆∞a c√≥ system prompt")
        
        with col2:
            st.write("**Human Prompt Preview**")
            if human_prompt:
                preview_text = human_prompt[:500] + "..." if len(human_prompt) > 500 else human_prompt
                st.text_area("Preview", value=preview_text, height=150, disabled=True, key="human_preview", label_visibility="collapsed")
                st.caption(f"üìù {len(human_prompt)} k√Ω t·ª±")
            else:
                st.info("Ch∆∞a c√≥ human prompt")
    
    # # Instructions
    # st.write("### üìã H∆∞·ªõng d·∫´n")
    # st.markdown("""
    # **Qu·∫£n l√Ω Prompts:**
    # - System Prompt: ƒê·ªãnh nghƒ©a vai tr√≤ v√† ti√™u ch√≠ ƒë√°nh gi√° cho LLM
    # - Human Prompt: Template cho input ƒë∆∞·ª£c g·ª≠i ƒë·∫øn LLM
    # - S·ª≠ d·ª•ng `{question}`, `{true_answer}`, `{agent_answer}`, `{level}`, `{department}` l√†m placeholders
    
    # **Qu·∫£n l√Ω Extract Sections:**
    # - Code Python ƒë·ªÉ tr√≠ch xu·∫•t k·∫øt qu·∫£ t·ª´ response c·ªßa LLM
    # - Ph·∫£i c√≥ function `extract_section(text)` tr·∫£ v·ªÅ dict v·ªõi keys: `scores` v√† `comments`
    # - `scores` ph·∫£i ch·ª©a c√°c metrics ph√π h·ª£p v·ªõi site (THFC c√≥ access_control, HR c√≥ tone)
    # - **ü§ñ T·ª± ƒë·ªông t·∫°o**: Nh·∫•n "T·ª± ƒë·ªông t·∫°o t·ª´ Prompt" ƒë·ªÉ AI ph√¢n t√≠ch system prompt v√† t·∫°o code ph√π h·ª£p
    
    # **L∆∞u √Ω:**
    # - Sau khi l∆∞u, c√°c thay ƒë·ªïi s·∫Ω c√≥ hi·ªáu l·ª±c ngay l·∫≠p t·ª©c
    # - Backup files tr∆∞·ªõc khi ch·ªânh s·ª≠a ƒë·ªÉ tr√°nh m·∫•t d·ªØ li·ªáu
    # - Ki·ªÉm tra syntax Python tr∆∞·ªõc khi l∆∞u extract sections
    # - T√≠nh nƒÉng t·ª± ƒë·ªông t·∫°o s·∫Ω ph√¢n t√≠ch c√°c ti√™u ch√≠ trong system prompt v√† t·∫°o code t∆∞∆°ng ·ª©ng
    # """)


with tab1:
    st.subheader("üìù Test h√†ng lo·∫°t t·ª´ file Excel")
    
    if add_chat_history_global:
        with st.expander("üí¨ Thi·∫øt l·∫≠p chat history", expanded=False):
            # T∆∞∆°ng t·ª± tab 1, hi·ªÉn th·ªã v√† cho ph√©p ch·ªânh s·ª≠a chat history
            if 'chat_history' not in st.session_state or st.session_state.chat_history is None:
                st.session_state.chat_history = [
                    {"role": "apiMessage", "content": "Vui l√≤ng cung c·∫•p h·ªç t√™n, s·ªë ƒëi·ªán tho·∫°i, tr∆∞·ªùng THPT v√† t·ªânh th√†nh sinh s·ªëng ƒë·ªÉ t√¥i c√≥ th·ªÉ t∆∞ v·∫•n t·ªët nh·∫•t. L∆∞u √Ω, th√¥ng tin b·∫°n cung c·∫•p c·∫ßn ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c."},
                    {"role": "userMessage", "content": "[Cung c·∫•p th√¥ng tin]"}
                ]
            
            new_history = []
            for i, msg in enumerate(st.session_state.chat_history):
                cols = st.columns([2, 8, 1])
                role = cols[0].selectbox(f"Role {i+1}", ["apiMessage", "userMessage"], key=f"role_batch_{i}", index=["apiMessage", "userMessage"].index(msg["role"]))
                content = cols[1].text_area(f"N·ªôi dung {i+1}", value=msg["content"], key=f"content_batch_{i}")
                if not cols[2].button("üóëÔ∏è", key=f"delete_batch_{i}", help="X√≥a message n√†y"):
                    new_history.append({"role": role, "content": content})
            st.session_state.chat_history = new_history

            if st.button("‚ûï Th√™m message", key="add_message_batch"):
                st.session_state.chat_history.append({"role": "userMessage", "content": ""})
                st.rerun()

    col1, col2 = st.columns([3, 1])
    with col1:
        uploaded_file = st.file_uploader("üìÅ Ch·ªçn file Excel ch·ª©a test cases", type=['xlsx', 'xls'])
    
    with col2:
        st.write("")  # Spacer
        st.write("")  # Spacer
        if uploaded_file:
            st.success("‚úÖ File ƒë√£ t·∫£i l√™n")
    
    if uploaded_file is not None:
        try:
            df = pd.read_excel(uploaded_file)
            
            # Ki·ªÉm tra file r·ªóng
            if df.empty:
                st.error("‚ùå File Excel r·ªóng! Vui l√≤ng t·∫£i l√™n file c√≥ d·ªØ li·ªáu.")
                st.stop()
            
            df = df.dropna(subset=[df.columns[0], df.columns[1]])
            
            # Ki·ªÉm tra sau khi dropna
            if df.empty:
                st.error("‚ùå File Excel kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i file.")
                st.stop()
            
            questions = df.iloc[:, 0].tolist()
            true_answers = df.iloc[:, 1].tolist()
            levels = df.iloc[:, 2].tolist() if len(df.columns) > 2 else ["L1"] * len(questions)
            departments = df.iloc[:, 3].tolist() if len(df.columns) > 3 else ["Ph√≤ng kinh doanh (Sales)"] * len(questions)
            
            # Kh·ªüi t·∫°o edited test cases trong session state n·∫øu ch∆∞a c√≥
            if 'test_cases_df_thfc' not in st.session_state or st.session_state.get('current_file_thfc') != uploaded_file.name:
                st.session_state.test_cases_df_thfc = pd.DataFrame({
                    'Ch·ªçn': [True] * len(questions),
                    'C√¢u h·ªèi': questions,
                    'C√¢u tr·∫£ l·ªùi chu·∫©n': true_answers,
                    'Level': levels,
                    'Department': departments
                })
                st.session_state.current_file_thfc = uploaded_file.name
            
            st.write("### üìã Danh s√°ch test cases")
            st.info("üí° Tip: Ch·ªçn c√°c d√≤ng b·∫°n mu·ªën ch·∫°y test b·∫±ng c√°ch click v√†o checkbox ·ªü ƒë·∫ßu m·ªói d√≤ng.")
            
            # S·ª≠ d·ª•ng st.dataframe v·ªõi selection
            selected_df = st.dataframe(
                st.session_state.test_cases_df_thfc,
                use_container_width=True,
                hide_index=True,
                on_select="rerun",
                selection_mode="multi-row",
                key="test_cases_selection_thfc"
            )
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col1:
                st.metric("üìä T·ªïng test cases", len(st.session_state.test_cases_df_thfc))
            with col2:
                # L·∫•y s·ªë d√≤ng ƒë∆∞·ª£c ch·ªçn t·ª´ selection
                selected_count = len(selected_df.selection.rows) if selected_df.selection.rows else 0
                st.metric("‚úÖ Test cases ƒë∆∞·ª£c ch·ªçn", selected_count)
            with col3:
                if st.button("‚ñ∂Ô∏è Ch·∫°y test", type="primary", use_container_width=True, key="run_batch_test_thfc"):
                    if selected_df.selection.rows:
                        # L·∫•y c√°c d√≤ng ƒë∆∞·ª£c ch·ªçn
                        selected_indices = selected_df.selection.rows
                        selected_questions = [st.session_state.test_cases_df_thfc.iloc[i]['C√¢u h·ªèi'] for i in selected_indices]
                        selected_true_answers = [st.session_state.test_cases_df_thfc.iloc[i]['C√¢u tr·∫£ l·ªùi chu·∫©n'] for i in selected_indices]
                        selected_levels = [st.session_state.test_cases_df_thfc.iloc[i]['Level'] for i in selected_indices]
                        selected_departments = [st.session_state.test_cases_df_thfc.iloc[i]['Department'] for i in selected_indices]
                        
                        # T·∫°o progress container to√†n m√†n h√¨nh
                        st.markdown("---")
                        progress_container = st.container()
                        with progress_container:
                            st.markdown("### ‚è≥ Ti·∫øn tr√¨nh x·ª≠ l√Ω")
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            current_question_text = st.empty()
                        
                        history = st.session_state.chat_history if (add_chat_history_global and st.session_state.chat_history) else None
                        results, failed_questions = process_questions_batch(
                            selected_questions, 
                            selected_true_answers, 
                            selected_levels, 
                            selected_departments, 
                            add_chat_history=add_chat_history_global, 
                            custom_history=history, 
                            test_name=uploaded_file.name, 
                            site=get_current_site(),
                            progress_bar=progress_bar,
                            status_text=status_text,
                            current_question_text=current_question_text
                        )
                        
                        st.session_state.results = results
                        
                        data = {
                            'Question': [r["question"] for r in results],
                            'True Answer': [r["true_answer"] for r in results],
                            'Level': [r["level"] for r in results],
                            'Department': [r["department"] for r in results],
                            'Agent Answer': [r["site_response"] for r in results],
                            'Session ID': [r["chat_id"] for r in results],
                            'Relevance Score': [r["evaluate_result"]["scores"].get("relevance", 0) for r in results],
                            'Accuracy Score': [r["evaluate_result"]["scores"].get("accuracy", 0) for r in results],
                            'Completeness Score': [r["evaluate_result"]["scores"].get("completeness", 0) for r in results],
                            'Access Control Score': [r["evaluate_result"]["scores"].get("access_control", 0) for r in results],
                            'Clarity Score': [r["evaluate_result"]["scores"].get("clarity", 0) for r in results],
                            'Average Score': [r["evaluate_result"]["scores"].get("average", 0) for r in results],
                            'Comment': [r["evaluate_result"].get("comments", "") for r in results]
                        }
                        results_df = pd.DataFrame(data)
                        st.session_state.results_df = results_df
                        st.rerun()  # Reload ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ b√™n ngo√†i
                    else:
                        st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt test case ƒë·ªÉ ch·∫°y")
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file Excel: {str(e)}")
            
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ test h√†ng lo·∫°t (to√†n m√†n h√¨nh) - di chuy·ªÉn ra ngo√†i column
        if 'results' in st.session_state and st.session_state.results:
            results = st.session_state.results
            results_df = st.session_state.results_df
            
            st.write("---")
            st.subheader(f"üìä K·∫øt qu·∫£ ƒë√°nh gi√° ({len(results)} c√¢u h·ªèi)")
            
            # Hi·ªÉn th·ªã metrics t·ªïng quan v·ªõi styling ƒë·∫πp h∆°n
            st.markdown("""
            <style>
            .metric-card {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                padding: 20px;
                border-radius: 10px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                color: white;
                text-align: center;
                margin: 5px;
            }
            .metric-card-success {
                background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            }
            .metric-card-danger {
                background: linear-gradient(135deg, #ee0979 0%, #ff6a00 100%);
            }
            .metric-card-info {
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            }
            .metric-label {
                font-size: 14px;
                font-weight: 500;
                opacity: 0.9;
                margin-bottom: 5px;
            }
            .metric-value {
                font-size: 32px;
                font-weight: bold;
                margin: 10px 0;
            }
            .dashboard-grid {
                display: grid;
                grid-template-columns: repeat(4, 1fr);
                gap: 15px;
                margin-bottom: 20px;
            }
            @media (max-width: 1200px) {
                .dashboard-grid {
                    grid-template-columns: repeat(2, 1fr);
                }
            }
            @media (max-width: 600px) {
                .dashboard-grid {
                    grid-template-columns: 1fr;
                }
            }
            </style>
            """, unsafe_allow_html=True)
            
            # Grid metrics v·ªõi styling ƒë·∫πp
            passed_count = sum(1 for r in results if "failed_details" not in r)
            failed_count = sum(1 for r in results if "failed_details" in r)
            avg_score = sum(r["evaluate_result"]["scores"].get("average", 0) for r in results) / len(results) if results else 0
            pass_rate = (passed_count / len(results) * 100) if results else 0
            
            st.markdown(f"""
            <div class="dashboard-grid">
                <div class="metric-card metric-card-success">
                    <div class="metric-label">‚úÖ Passed</div>
                    <div class="metric-value">{passed_count}</div>
                </div>
                <div class="metric-card metric-card-danger">
                    <div class="metric-label">‚ùå Failed</div>
                    <div class="metric-value">{failed_count}</div>
                </div>
                <div class="metric-card metric-card-info">
                    <div class="metric-label">üìà ƒêi·ªÉm TB</div>
                    <div class="metric-value">{avg_score:.2f}</div>
                </div>
                <div class="metric-card metric-card-info">
                    <div class="metric-label">üìä T·ª∑ l·ªá pass</div>
                    <div class="metric-value">{pass_rate:.1f}%</div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã dataframe v·ªõi styling t·ªët h∆°n
            st.write("### üìã Chi ti·∫øt k·∫øt qu·∫£")
            st.dataframe(
                results_df, 
                use_container_width=True, 
                hide_index=True,
                height=400  # TƒÉng chi·ªÅu cao ƒë·ªÉ hi·ªÉn th·ªã nhi·ªÅu d√≤ng h∆°n
            )
            
            # N√∫t t·∫£i xu·ªëng v√† th√¥ng b√°o
            col1, col2 = st.columns([1, 1])
            with col1:
                st.download_button(
                    label="üì• T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)", 
                    data=results_df.to_csv(index=False).encode('utf-8'), 
                    file_name=f'evaluation_results_{uploaded_file.name}.csv', 
                    mime='text/csv',
                    use_container_width=True
                )
            with col2:
                if failed_count > 0:
                    st.warning(f"‚ö†Ô∏è C√≥ {failed_count} c√¢u h·ªèi x·ª≠ l√Ω th·∫•t b·∫°i")
                else:
                    st.success(f"‚úÖ ƒê√£ ho√†n th√†nh ƒë√°nh gi√° {len(results)} c√¢u h·ªèi")
    else:
        st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu")

with tab2:
    st.subheader("L·∫≠p l·ªãch ch·∫°y test t·ª± ƒë·ªông")

    site = get_current_site()
    existing_job = get_scheduled_job_for_site(site)
    
    if existing_job:
        st.info(f"Site **{site}** ƒë√£ c√≥ c·∫•u h√¨nh l·ªãch test. B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a ho·∫∑c x√≥a c·∫•u h√¨nh hi·ªán t·∫°i.")
        
        st.write("### C·∫•u h√¨nh hi·ªán t·∫°i")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.write(f"**T√™n Test:** {existing_job['test_name']}")
            st.write(f"**Lo·∫°i l·ªãch:** {existing_job['schedule_type']}")
            st.write(f"**Th·ªùi gian:** {existing_job.get('schedule_time', 'N/A')}")
            if existing_job.get('schedule_day'):
                st.write(f"**Ng√†y:** {existing_job['schedule_day']}")
            if existing_job.get('custom_interval') and existing_job.get('custom_unit'):
                st.write(f"**T√πy ch·ªânh:** M·ªói {existing_job['custom_interval']} {existing_job['custom_unit']}")
            st.write(f"**API URL:** `{existing_job.get('api_url', 'Ch∆∞a c·∫•u h√¨nh')}`")
            st.write(f"**Evaluate API URL:** `{existing_job.get('evaluate_api_url', 'Ch∆∞a c·∫•u h√¨nh')}`")
            
            # Show next run time - D√πng Schedule Manager
            if schedule_manager:
                # Th·ª≠ l·∫•y th·ªùi gian t·ª´ schedule job tr∆∞·ªõc
                next_run_vn = schedule_manager.get_next_run(site)
                
                # N·∫øu kh√¥ng c√≥, t√≠nh to√°n t·ª´ config
                if not next_run_vn:
                    next_run_vn = schedule_manager.calculate_next_run_time(site)
                
                if next_run_vn:
                    st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** {next_run_vn.strftime('%Y-%m-%d %H:%M:%S')} (GMT+7)")
                    st.caption("‚è∞ Th·ªùi gian ƒë∆∞·ª£c t√≠nh to√°n t·ª± ƒë·ªông v√† persistent qua c√°c l·∫ßn reload")
                    
                    # T·ª± ƒë·ªông save config sau khi hi·ªÉn th·ªã
                    try:
                        schedule_manager.save_schedules(schedule_manager.get_all_schedule_configs())
                        st.caption("üíæ C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông")
                    except Exception as e:
                        logger.warning(f"Kh√¥ng th·ªÉ l∆∞u config: {e}")
                else:
                    # Fallback: Hi·ªÉn th·ªã th√¥ng tin l·ªãch
                    schedule_type = existing_job.get('schedule_type', 'N/A')
                    schedule_time = existing_job.get('schedule_time', 'N/A')
                    schedule_day = existing_job.get('schedule_day', 'N/A')
                    
                    if schedule_type == "minute":
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** M·ªói ph√∫t")
                    elif schedule_type == "hourly":
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** M·ªói gi·ªù t·∫°i ph√∫t {schedule_time.split(':')[1] if ':' in schedule_time else '00'}")
                    elif schedule_type == "daily":
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** M·ªói ng√†y l√∫c {schedule_time}")
                    elif schedule_type == "weekly":
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** M·ªói {schedule_day} l√∫c {schedule_time}")
                    elif schedule_type == "custom":
                        interval = existing_job.get('custom_interval', 'N/A')
                        unit = existing_job.get('custom_unit', 'N/A')
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** M·ªói {interval} {unit}")
                    else:
                        st.write(f"**Ch·∫°y l·∫ßn t·ªõi:** {schedule_type} - {schedule_time}")
            else:
                st.warning("‚ö†Ô∏è Schedule Manager ch∆∞a kh·ªüi t·∫°o")
        
        with col2:
            if st.button("Ch·ªânh s·ª≠a", key="edit_existing_job"):
                st.session_state.editing_existing_job = True
                st.rerun()
            
            if st.button("X√≥a c·∫•u h√¨nh", key="delete_existing_job"):
                # S·ª≠ d·ª•ng Schedule Manager ƒë·ªÉ x√≥a
                if schedule_manager:
                    if schedule_manager.remove_schedule(site):
                        st.success(f"‚úÖ ƒê√£ x√≥a l·ªãch test cho site '{site}'. Test cases v√† k·∫øt qu·∫£ test v·∫´n ƒë∆∞·ª£c gi·ªØ l·∫°i.")
                    else:
                        st.error("‚ùå L·ªói khi x√≥a l·ªãch test!")
                else:
                    st.error("‚ùå Schedule Manager ch∆∞a kh·ªüi t·∫°o!")
                
                st.rerun()
        
        # Show edit form if editing
        if st.session_state.get('editing_existing_job', False):
            st.write("### Ch·ªânh s·ª≠a c·∫•u h√¨nh")
            
            # API URLs
            new_api_url = st.text_input("API URL", value=existing_job.get('api_url', "https://site1.com"), key="edit_api_url")
            new_eval_api_url = st.text_input("Evaluate API URL", value=existing_job.get('evaluate_api_url', "https://site2.com"), key="edit_eval_api_url")
            
            # Test file
            st.write("**File test hi·ªán t·∫°i:**")
            if os.path.exists(existing_job['file_path']):
                try:
                    df_current = pd.read_excel(existing_job['file_path'])
                    st.write(f"File: `{os.path.basename(existing_job['file_path'])}` ({len(df_current)} d√≤ng)")
                    st.write("**Preview 5 d√≤ng ƒë·∫ßu ti√™n:**")
                    st.dataframe(df_current.head(5), use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi ƒë·ªçc file hi·ªán t·∫°i: {str(e)}")
                else:
                    st.warning("File test hi·ªán t·∫°i kh√¥ng t·ªìn t·∫°i")
            
            st.write("**Upload file test m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng thay ƒë·ªïi):**")
            new_test_file = st.file_uploader("File test m·ªõi", type=['xlsx', 'xls'], key="edit_test_file")
            
            # Hi·ªÉn th·ªã preview file m·ªõi n·∫øu c√≥
            if new_test_file is not None:
                try:
                    df_new_preview = pd.read_excel(new_test_file)
                    st.write("**Preview 5 d√≤ng ƒë·∫ßu ti√™n c·ªßa file m·ªõi:**")
                    st.dataframe(df_new_preview.head(5), use_container_width=True)
                    
                    # Reset file pointer ƒë·ªÉ c√≥ th·ªÉ ƒë·ªçc l·∫°i sau n√†y
                    new_test_file.seek(0)
                except Exception as e:
                    st.error(f"L·ªói khi ƒë·ªçc file Excel m·ªõi: {str(e)}")
                    new_test_file = None
            
            new_test_name = st.text_input("T√™n test m·ªõi", value=existing_job['test_name'], key="edit_test_name")
            
            # Schedule settings
            current_schedule_type = existing_job.get('schedule_type', 'daily')
            if current_schedule_type is None:
                current_schedule_type = 'daily'
            schedule_type_index = ["minute", "hourly", "daily", "weekly", "custom"].index(current_schedule_type) if current_schedule_type in ["minute", "hourly", "daily", "weekly", "custom"] else 2
            new_schedule_type = st.selectbox("Lo·∫°i l·ªãch", ["minute", "hourly", "daily", "weekly", "custom"], 
                                            index=schedule_type_index, 
                                            key="edit_schedule_type")
            
            new_schedule_time = None
            new_schedule_day = None
            new_custom_interval = None
            new_custom_unit = None
            
            col1, col2 = st.columns(2)
            with col1:
                if new_schedule_type == "minute":
                    st.info("Test s·∫Ω ch·∫°y m·ªói ph√∫t")
                    
                elif new_schedule_type == "hourly":
                    # Safe parsing for hourly schedule
                    current_time = existing_job.get('schedule_time')
                    if current_time is None or current_time == '':
                        current_time = '00:00'
                    try:
                        time_parts = current_time.split(':')
                        if len(time_parts) >= 2:
                            current_minute = int(time_parts[1])
                        else:
                            current_minute = 0
                    except (ValueError, IndexError):
                        current_minute = 0
                    minute = st.number_input("Ph√∫t", 0, 59, current_minute, key="edit_schedule_minute")
                    new_schedule_time = f"00:{minute:02d}"
                    
                elif new_schedule_type == "custom":
                    # Safe parsing for custom schedule
                    current_interval = existing_job.get('custom_interval')
                    if current_interval is None:
                        current_interval = 2
                    new_custom_interval = st.number_input("M·ªói", 1, 100, current_interval, key="edit_custom_interval")
                    
                    current_custom_unit = existing_job.get('custom_unit')
                    if current_custom_unit is None or current_custom_unit not in ["ph√∫t", "gi·ªù", "ng√†y", "tu·∫ßn"]:
                        current_custom_unit = 'gi·ªù'
                    unit_index = ["ph√∫t", "gi·ªù", "ng√†y", "tu·∫ßn"].index(current_custom_unit) if current_custom_unit in ["ph√∫t", "gi·ªù", "ng√†y", "tu·∫ßn"] else 1
                    new_custom_unit = st.selectbox("ƒê∆°n v·ªã", ["ph√∫t", "gi·ªù", "ng√†y", "tu·∫ßn"], 
                                                 index=unit_index, 
                                                 key="edit_custom_unit")
                    
                else:  # daily or weekly
                    # Safe parsing for daily/weekly schedule
                    current_time = existing_job.get('schedule_time')
                    if current_time is None or current_time == '':
                        current_time = '00:00'
                    try:
                        time_parts = current_time.split(':')
                        if len(time_parts) >= 2:
                            hour = int(time_parts[0])
                            minute = int(time_parts[1])
                            time_obj = datetime.time(hour, minute)
                        else:
                            time_obj = datetime.time(0, 0)
                    except (ValueError, IndexError):
                        time_obj = datetime.time(0, 0)
                    schedule_time_input = st.time_input("Th·ªùi gian", value=time_obj, key="edit_schedule_time")
                    new_schedule_time = schedule_time_input.strftime("%H:%M")
            
            with col2:
                if new_schedule_type == "weekly":
                    current_day = existing_job.get('schedule_day')
                    if current_day is None or current_day not in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]:
                        current_day = 'Monday'
                    day_index = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].index(current_day)
                    new_schedule_day = st.selectbox("Ng√†y trong tu·∫ßn", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], 
                                                 index=day_index, 
                                                 key="edit_schedule_day")
            
            col1, col2, col3 = st.columns([1, 1, 4])
            with col1:
                if st.button("L∆∞u thay ƒë·ªïi", key="save_edit_existing"):
                    # Update job config
                    job_index = next((i for i, job in enumerate(st.session_state.scheduled_jobs) if job['job_id'] == existing_job['job_id']), None)
                    if job_index is not None:
                        # Update file if new one provided
                        if new_test_file is not None:
                            # Remove old file
                            if os.path.exists(existing_job['file_path']):
                                try:
                                    os.remove(existing_job['file_path'])
                                    st.info(f"ƒê√£ x√≥a file test c≈©: {os.path.basename(existing_job['file_path'])}")
                                except Exception as e:
                                    st.warning(f"Kh√¥ng th·ªÉ x√≥a file c≈©: {str(e)}")
                            
                            # T·∫°o th∆∞ m·ª•c cho site n·∫øu ch∆∞a c√≥
                            site_dir = os.path.join(SCHEDULED_TESTS_DIR, site)
                            os.makedirs(site_dir, exist_ok=True)
                            
                            # Save new file
                            saved_file_name = f"{new_test_name.replace(' ', '_')}_{datetime.datetime.now().strftime('%Y_%m_%d_%H_%M_%S')}.xlsx"
                            saved_file_path = os.path.join(site_dir, saved_file_name)
                            with open(saved_file_path, "wb") as f:
                                f.write(new_test_file.getbuffer())
                            
                            st.session_state.scheduled_jobs[job_index]['file_path'] = saved_file_path
                            st.info(f"ƒê√£ l∆∞u file test m·ªõi: {saved_file_name}")
                        
                        # Update other fields
                        st.session_state.scheduled_jobs[job_index]['test_name'] = new_test_name
                        st.session_state.scheduled_jobs[job_index]['schedule_type'] = new_schedule_type
                        st.session_state.scheduled_jobs[job_index]['schedule_time'] = new_schedule_time
                        st.session_state.scheduled_jobs[job_index]['schedule_day'] = new_schedule_day
                        st.session_state.scheduled_jobs[job_index]['custom_interval'] = new_custom_interval
                        st.session_state.scheduled_jobs[job_index]['custom_unit'] = new_custom_unit
                        st.session_state.scheduled_jobs[job_index]['api_url'] = new_api_url
                        st.session_state.scheduled_jobs[job_index]['evaluate_api_url'] = new_eval_api_url
                        
                        save_scheduled_jobs()
                        
                        # X√≥a job c≈© v√† t·∫°o l·∫°i v·ªõi c·∫•u h√¨nh m·ªõi
                        jobs_to_remove = []
                        for job in schedule.jobs:
                            try:
                                if len(job.job_func.args) >= 3 and job.job_func.args[1] == existing_job['test_name'] and job.job_func.args[2] == existing_job['site']:
                                    jobs_to_remove.append(job)
                            except (IndexError, AttributeError):
                                continue
                        
                        for job in jobs_to_remove:
                            schedule.cancel_job(job)
                        
                        # T·∫°o l·∫°i job v·ªõi c·∫•u h√¨nh m·ªõi
                        setup_schedule(
                            file_path=st.session_state.scheduled_jobs[job_index]['file_path'],
                            schedule_type=new_schedule_type,
                            schedule_time=new_schedule_time,
                            schedule_day=new_schedule_day,
                            test_name=new_test_name,
                            site=site,
                            api_url=new_api_url,
                            evaluate_api_url=new_eval_api_url,
                            custom_interval=new_custom_interval,
                            custom_unit=new_custom_unit
                        )
                        
                        st.session_state.editing_existing_job = False
                        
                        st.success(f"ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh l·ªãch test cho site '{site}'.")
                        st.rerun()
            
            with col2:
                if st.button("H·ªßy", key="cancel_edit_existing"):
                    st.session_state.editing_existing_job = False
                    st.rerun()
    
    else:
        st.write("### T·∫°o c·∫•u h√¨nh l·ªãch test m·ªõi")
        st.write(f"Site hi·ªán t·∫°i: **{site}**")
        
        st.write("### B∆∞·ªõc 1: C·∫•u h√¨nh API URLs cho l·ªãch test")
        schedule_api_url = st.text_input("API URL cho l·ªãch test", st.session_state.get("schedule_api_url", "https://site1.com"), key="schedule_api_url_input")
        schedule_evaluate_api_url = st.text_input("Evaluate API URL cho l·ªãch test", st.session_state.get("schedule_evaluate_api_url", "https://site2.com"), key="schedule_evaluate_api_url_input")
        
        # L∆∞u v√†o session state
        st.session_state.schedule_api_url = schedule_api_url
        st.session_state.schedule_evaluate_api_url = schedule_evaluate_api_url

        st.write("### B∆∞·ªõc 2: Ki·ªÉm tra test cases v√† ƒë·∫∑t t√™n")
        
        # Check if test cases exist
        if not test_cases_exists(site):
            st.warning("‚ö†Ô∏è Ch∆∞a c√≥ test cases cho site n√†y. Vui l√≤ng t·∫°o test cases trong tab 'Qu·∫£n l√Ω Test Cases' tr∆∞·ªõc.")
            st.stop()
        
        # Load test cases
        test_cases_df = load_test_cases(site)
        
        if test_cases_df is not None:
            st.write(f"**Test cases hi·ªán t·∫°i:** {len(test_cases_df)} test cases")
            st.write("**Preview 5 test cases ƒë·∫ßu ti√™n:**")
            st.dataframe(test_cases_df.head(5), use_container_width=True)
        else:
            st.error("‚ùå L·ªói khi ƒë·ªçc test cases!")
            st.stop()
        
        test_name = st.text_input("T√™n b·ªô test (ƒë·ªÉ nh·∫≠n di·ªán trong l·ªãch s·ª≠)", key="test_name_input")

        if test_name:
            st.write("### B∆∞·ªõc 3: Thi·∫øt l·∫≠p l·ªãch ch·∫°y test")
            
            schedule_type = st.selectbox("Lo·∫°i l·ªãch", ["minute", "hourly", "daily", "weekly", "custom"], key="schedule_type_select")
            
            schedule_time = None
            schedule_day = None
            schedule_custom_interval = None
            schedule_custom_unit = None

            col1, col2 = st.columns(2)
            with col1:
                if schedule_type == "minute":
                    st.info("Test s·∫Ω ch·∫°y m·ªói ph√∫t")
                elif schedule_type == "hourly":
                    minute = st.number_input("Ph√∫t", 0, 59, 0, key="schedule_minute")
                    schedule_time = f"00:{minute:02d}"
                elif schedule_type == "custom":
                    schedule_custom_interval = st.number_input("M·ªói", 1, 100, 2, key="schedule_custom_interval")
                    schedule_custom_unit = st.selectbox("ƒê∆°n v·ªã", ["ph√∫t", "gi·ªù", "ng√†y", "tu·∫ßn"], key="schedule_custom_unit")
                else:
                    schedule_time_input = st.time_input("Th·ªùi gian", key="schedule_time_input")
                    schedule_time = schedule_time_input.strftime("%H:%M")
            
            with col2:
                if schedule_type == "weekly":
                    schedule_day = st.selectbox("Ng√†y trong tu·∫ßn", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], key="schedule_day_select")

            if st.button("Thi·∫øt l·∫≠p l·ªãch"):
                # L·∫•y ƒë∆∞·ªùng d·∫´n file test cases c·ªßa site
                saved_file_path = get_test_cases_file_path(site)

                job_config = {
                    "file_path": saved_file_path,
                    "schedule_type": schedule_type,
                    "schedule_time": schedule_time,
                    "schedule_day": schedule_day,
                    "test_name": test_name,
                    "site": site,
                    "custom_interval": schedule_custom_interval,
                    "custom_unit": schedule_custom_unit,
                    "api_url": schedule_api_url,
                    "evaluate_api_url": schedule_evaluate_api_url,
                    "job_id": str(uuid4())
                }
                
                # S·ª≠ d·ª•ng Schedule Manager ƒë·ªÉ l∆∞u
                if schedule_manager:
                    if schedule_manager.update_schedule(site, job_config):
                        st.success(f"ƒê√£ thi·∫øt l·∫≠p l·ªãch ch·∫°y test '{test_name}' cho site '{site}'.")
                    else:
                        st.error("‚ùå L·ªói khi l∆∞u l·ªãch test!")
                else:
                    st.error("‚ùå Schedule Manager ch∆∞a kh·ªüi t·∫°o!")
                
                st.rerun()

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
st.sidebar.subheader("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
st.sidebar.markdown("""
### Test h√†ng lo·∫°t
1. T·∫£i file Excel.
2. Ch·ªçn c√°c c√¢u h·ªèi mu·ªën test.
3. Nh·∫•n "Test h√†ng lo·∫°t".

### L·∫≠p l·ªãch test
1. Ch·ªçn test cases ƒë√£ l∆∞u v√† ƒë·∫∑t t√™n.
2. Thi·∫øt l·∫≠p l·ªãch v√† nh·∫•n "Thi·∫øt l·∫≠p l·ªãch".

### Qu·∫£n l√Ω test
1. Xem l·ªãch s·ª≠ v√† c√°c test case th·∫•t b·∫°i.

### Qu·∫£n l√Ω Test Cases
1. Upload file Excel ch·ª©a test cases.
2. Ch·ªânh s·ª≠a v√† l∆∞u test cases.
3. Qu·∫£n l√Ω c√°c b·ªô test cases ƒë√£ l∆∞u.

### Qu·∫£n l√Ω Prompts
1. Ch·ªânh s·ª≠a system prompt v√† human prompt.
2. C·∫≠p nh·∫≠t extract sections code.
3. L∆∞u ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi.
""")