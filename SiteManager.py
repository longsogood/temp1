import streamlit as st
import os
import shutil
import json
from pathlib import Path

st.set_page_config(
    layout="wide",
    page_title="Qu·∫£n l√Ω Sites",
    page_icon="üè¢"
)

st.title("üè¢ Qu·∫£n l√Ω Sites")

# Helper functions
def get_all_sites():
    """L·∫•y danh s√°ch t·∫•t c·∫£ c√°c site t·ª´ th∆∞ m·ª•c pages"""
    pages_dir = "pages"
    sites = []
    
    if os.path.exists(pages_dir):
        for file in os.listdir(pages_dir):
            if file.endswith(".py") and file != "Qu·∫£n l√Ω Sites.py":
                site_name = file.replace(".py", "")
                sites.append(site_name)
    
    return sorted(sites)

def get_site_info(site_name):
    """L·∫•y th√¥ng tin chi ti·∫øt c·ªßa site"""
    info = {
        "prompts_exist": False,
        "backup_exist": False,
        "test_results_exist": False,
        "scheduled_test_exist": False
    }
    
    # Check prompts
    prompts_path = os.path.join("prompts", site_name)
    if os.path.exists(prompts_path):
        info["prompts_exist"] = True
        info["prompts_count"] = len([f for f in os.listdir(prompts_path) if f.endswith(".txt")])
    
    # Check backup
    backup_path = os.path.join("backup_prompts", site_name)
    if os.path.exists(backup_path):
        info["backup_exist"] = True
        info["backup_count"] = len([f for f in os.listdir(backup_path)])
    
    # Check test results
    results_path = os.path.join("test_results", site_name)
    if os.path.exists(results_path):
        info["test_results_exist"] = True
        info["results_count"] = len([f for f in os.listdir(results_path) if f.endswith(('.xlsx', '.xls'))])
    
    # Check scheduled tests - ch·ªâ ƒë√°nh d·∫•u True n·∫øu c√≥ file test
    scheduled_path = os.path.join("scheduled_tests", site_name)
    if os.path.exists(scheduled_path):
        scheduled_files = [f for f in os.listdir(scheduled_path) if f.endswith(('.xlsx', '.xls'))]
        if scheduled_files:
            info["scheduled_test_exist"] = True
            info["scheduled_count"] = len(scheduled_files)
    
    return info

def create_new_site(site_name):
    """T·∫°o site m·ªõi t·ª´ template"""
    try:
        # Copy original_site.py to pages/{site_name}.py
        source = "original_site.py"
        dest = os.path.join("pages", f"{site_name}.py")
        
        if os.path.exists(dest):
            return False, "Site ƒë√£ t·ªìn t·∫°i!"
        
        # Read template
        with open(source, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Replace SITE variable
        content = content.replace('SITE = "Agent HR N·ªôi b·ªô"', f'SITE = "{site_name}"')
        
        # Write new file
        with open(dest, 'w', encoding='utf-8') as f:
            f.write(content)
        
        # T·ª± ƒë·ªông copy prompts t·ª´ original_prompts
        original_prompts_dir = "original_prompts"
        if os.path.exists(original_prompts_dir):
            # Create site prompts directory
            site_prompts_dir = os.path.join("prompts", site_name)
            os.makedirs(site_prompts_dir, exist_ok=True)
            
            # Copy prompts
            for prompt_file in ["system_prompt.txt", "human_prompt.txt"]:
                source_prompt = os.path.join(original_prompts_dir, prompt_file)
                if os.path.exists(source_prompt):
                    dest_prompt = os.path.join(site_prompts_dir, prompt_file)
                    shutil.copy2(source_prompt, dest_prompt)
            
            # Create utils directory and copy extract_sections
            site_utils_dir = os.path.join("utils", site_name)
            os.makedirs(site_utils_dir, exist_ok=True)
            
            source_extract = os.path.join(original_prompts_dir, "extract_sections.py")
            if os.path.exists(source_extract):
                dest_extract = os.path.join(site_utils_dir, "extract_sections.py")
                shutil.copy2(source_extract, dest_extract)
        
        # Initialize schedule config for the new site in schedule_config.json
        schedule_config_file = "schedule_config.json"
        try:
            # Load existing config
            if os.path.exists(schedule_config_file):
                with open(schedule_config_file, 'r', encoding='utf-8') as f:
                    schedule_config = json.load(f)
            else:
                schedule_config = {}
            
            # Initialize empty schedule for new site (only if not exists)
            if site_name not in schedule_config:
                schedule_config[site_name] = None
                
                # Save updated config
                with open(schedule_config_file, 'w', encoding='utf-8') as f:
                    json.dump(schedule_config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            # Log but don't fail site creation if schedule init fails
            print(f"Warning: Failed to initialize schedule config for {site_name}: {e}")
        
        return True, f"ƒê√£ t·∫°o site m·ªõi: {site_name} (bao g·ªìm prompts & extract sections)"
        
    except Exception as e:
        return False, f"L·ªói khi t·∫°o site: {str(e)}"

def delete_site(site_name):
    """X√≥a site v√† to√†n b·ªô d·ªØ li·ªáu li√™n quan"""
    try:
        deleted_items = []
        
        # Delete page file
        page_file = os.path.join("pages", f"{site_name}.py")
        if os.path.exists(page_file):
            os.remove(page_file)
            deleted_items.append("Page file")
        
        # Delete prompts
        prompts_dir = os.path.join("prompts", site_name)
        if os.path.exists(prompts_dir):
            shutil.rmtree(prompts_dir)
            deleted_items.append("Prompts")
        
        # Delete backup
        backup_dir = os.path.join("backup_prompts", site_name)
        if os.path.exists(backup_dir):
            shutil.rmtree(backup_dir)
            deleted_items.append("Backup prompts")
        
        # Delete utils
        utils_dir = os.path.join("utils", site_name)
        if os.path.exists(utils_dir):
            shutil.rmtree(utils_dir)
            deleted_items.append("Utils")
        
        # Delete test results
        results_dir = os.path.join("test_results", site_name)
        if os.path.exists(results_dir):
            shutil.rmtree(results_dir)
            deleted_items.append("Test results")
        
        # Delete scheduled tests
        scheduled_dir = os.path.join("scheduled_tests", site_name)
        if os.path.exists(scheduled_dir):
            shutil.rmtree(scheduled_dir)
            deleted_items.append("Scheduled tests")
        
        # Remove schedule config from schedule_config.json
        schedule_config_file = "schedule_config.json"
        try:
            if os.path.exists(schedule_config_file):
                with open(schedule_config_file, 'r', encoding='utf-8') as f:
                    schedule_config = json.load(f)
                
                # Remove site's schedule if it exists
                if site_name in schedule_config:
                    del schedule_config[site_name]
                    deleted_items.append("Schedule config")
                    
                    # Save updated config
                    with open(schedule_config_file, 'w', encoding='utf-8') as f:
                        json.dump(schedule_config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            # Log but don't fail deletion if schedule cleanup fails
            print(f"Warning: Failed to remove schedule config for {site_name}: {e}")
        
        return True, f"ƒê√£ x√≥a: {', '.join(deleted_items)}"
        
    except Exception as e:
        return False, f"L·ªói khi x√≥a site: {str(e)}"

# Main UI
st.write("### üìä Danh s√°ch Sites")

sites = get_all_sites()

if not sites:
    st.info("Ch∆∞a c√≥ site n√†o. H√£y t·∫°o site m·ªõi b√™n d∆∞·ªõi.")
else:
    # Display sites in a table
    sites_data = []
    for site in sites:
        info = get_site_info(site)
        sites_data.append({
            "Site": site,
            "üìù Prompts": "‚úÖ" if info["prompts_exist"] else "‚ùå",
            "üì¶ Backup": "‚úÖ" if info["backup_exist"] else "‚ùå",
            "üìä Test Results": f"{info.get('results_count', 0)} files" if info["test_results_exist"] else "-",
            "‚è∞ Scheduled": "‚úÖ" if info["scheduled_test_exist"] else "‚ùå"
        })
    
    import pandas as pd
    df = pd.DataFrame(sites_data)
    
    # Display with selection
    st.dataframe(df, use_container_width=True, hide_index=True)
    
    st.write(f"**T·ªïng s·ªë sites:** {len(sites)}")

# Create new site section
st.write("---")
st.write("### ‚ûï T·∫°o Site M·ªõi")

col1, col2 = st.columns([3, 1])

with col1:
    new_site_name = st.text_input(
        "T√™n site m·ªõi",
        placeholder="V√≠ d·ª•: Customer Support, Sales Team, ...",
        help="Nh·∫≠p t√™n site, kh√¥ng c·∫ßn th√™m s·ªë th·ª© t·ª±"
    )

with col2:
    st.write("")  # Spacing
    st.write("")  # Spacing
    if st.button("üéØ T·∫°o Site", type="primary", use_container_width=True):
        if new_site_name:
            success, message = create_new_site(new_site_name)
            if success:
                st.success(message)
                st.info("üí° Site m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o! Reload trang ƒë·ªÉ th·∫•y site m·ªõi trong menu.")
                st.rerun()
            else:
                st.error(message)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t√™n site")

# Delete site section
st.write("---")
st.write("### üóëÔ∏è X√≥a Site")

st.warning("‚ö†Ô∏è **C·∫£nh b√°o**: X√≥a site s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu li√™n quan (prompts, backup, test results, ...)")

if sites:
    col1, col2 = st.columns([3, 1])
    
    with col1:
        site_to_delete = st.selectbox(
            "Ch·ªçn site c·∫ßn x√≥a",
            sites,
            help="Ch·ªçn site mu·ªën x√≥a"
        )
        
        # Show info about what will be deleted
        if site_to_delete:
            info = get_site_info(site_to_delete)
            st.write("**S·∫Ω x√≥a:**")
            
            items_to_delete = []
            if info["prompts_exist"]:
                items_to_delete.append(f"üìù Prompts ({info.get('prompts_count', 0)} files)")
            if info["backup_exist"]:
                items_to_delete.append(f"üì¶ Backup ({info.get('backup_count', 0)} files)")
            if info["test_results_exist"]:
                items_to_delete.append(f"üìä Test Results ({info.get('results_count', 0)} files)")
            if info["scheduled_test_exist"]:
                items_to_delete.append(f"‚è∞ Scheduled Tests ({info.get('scheduled_count', 0)} files)")
            
            if items_to_delete:
                for item in items_to_delete:
                    st.write(f"- {item}")
            else:
                st.write("- Ch·ªâ x√≥a page file (kh√¥ng c√≥ d·ªØ li·ªáu kh√°c)")
    
    with col2:
        st.write("")  # Spacing
        st.write("")  # Spacing
        
        # Confirmation checkbox
        confirm_delete = st.checkbox("X√°c nh·∫≠n x√≥a", key="confirm_delete")
        
        if st.button("‚ùå X√≥a Site", type="secondary", use_container_width=True, disabled=not confirm_delete):
            if confirm_delete:
                success, message = delete_site(site_to_delete)
                if success:
                    st.success(message)
                    st.info("üí° Site ƒë√£ ƒë∆∞·ª£c x√≥a! Reload trang ƒë·ªÉ c·∫≠p nh·∫≠t menu.")
                    st.rerun()
                else:
                    st.error(message)
else:
    st.info("Kh√¥ng c√≥ site n√†o ƒë·ªÉ x√≥a")

# Site information section
st.write("---")
st.write("### üìã Chi ti·∫øt Site")

if sites:
    selected_site = st.selectbox("Ch·ªçn site ƒë·ªÉ xem chi ti·∫øt", sites, key="site_detail_select")
    
    if selected_site:
        info = get_site_info(selected_site)
        
        # Display in columns
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìù Prompts",
                "C√≥" if info["prompts_exist"] else "Kh√¥ng",
                f"{info.get('prompts_count', 0)} files" if info["prompts_exist"] else None
            )
        
        with col2:
            st.metric(
                "üì¶ Backup",
                "C√≥" if info["backup_exist"] else "Kh√¥ng",
                f"{info.get('backup_count', 0)} files" if info["backup_exist"] else None
            )
        
        with col3:
            st.metric(
                "üìä Test Results",
                info.get('results_count', 0) if info["test_results_exist"] else 0,
                "files"
            )
        
        with col4:
            st.metric(
                "‚è∞ Scheduled",
                "C√≥" if info["scheduled_test_exist"] else "Kh√¥ng",
                f"{info.get('scheduled_count', 0)} files" if info["scheduled_test_exist"] else None
            )
        
        # File paths
        st.write("**üìÅ ƒê∆∞·ªùng d·∫´n:**")
        
        paths = {
            "Page file": os.path.join("pages", f"{selected_site}.py"),
            "Prompts": os.path.join("prompts", selected_site),
            "Backup": os.path.join("backup_prompts", selected_site),
            "Utils": os.path.join("utils", selected_site),
            "Test Results": os.path.join("test_results", selected_site),
            "Scheduled Tests": os.path.join("scheduled_tests", selected_site)
        }
        
        for name, path in paths.items():
            exists = os.path.exists(path)
            status = "‚úÖ" if exists else "‚ùå"
            st.write(f"{status} **{name}**: `{path}`")

# Instructions
st.write("---")
st.write("### üìñ H∆∞·ªõng d·∫´n")

with st.expander("üí° C√°ch t·∫°o site m·ªõi", expanded=False):
    st.markdown("""
    **B∆∞·ªõc 1:** Nh·∫≠p t√™n site v√†o √¥ "T√™n site m·ªõi"
    
    **B∆∞·ªõc 2:** Nh·∫•n n√∫t "üéØ T·∫°o Site"
    
    **B∆∞·ªõc 3:** Reload trang (Ctrl+R ho·∫∑c F5) ƒë·ªÉ th·∫•y site m·ªõi trong sidebar
    
    **B∆∞·ªõc 4:** V√†o site m·ªõi v√† c·∫•u h√¨nh prompts trong tab "Qu·∫£n l√Ω Prompts"
    
    ---
    
    **L∆∞u √Ω:**
    - Site m·ªõi s·∫Ω t·ª± ƒë·ªông copy prompts t·ª´ `original_prompts/`
    - B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a prompts sau khi t·∫°o
    - M·ªói site c√≥ th∆∞ m·ª•c ri√™ng cho prompts, backup, v√† test results
    """)

with st.expander("‚öôÔ∏è C·∫•u tr√∫c th∆∞ m·ª•c site", expanded=False):
    st.markdown("""
    M·ªói site s·∫Ω c√≥ c·∫•u tr√∫c th∆∞ m·ª•c nh∆∞ sau:
    
    ```
    ‚îú‚îÄ‚îÄ pages/
    ‚îÇ   ‚îî‚îÄ‚îÄ {Site Name}.py              # Page ch√≠nh c·ªßa site
    ‚îú‚îÄ‚îÄ prompts/
    ‚îÇ   ‚îî‚îÄ‚îÄ {Site Name}/
    ‚îÇ       ‚îú‚îÄ‚îÄ system_prompt.txt       # System prompt
    ‚îÇ       ‚îî‚îÄ‚îÄ human_prompt.txt        # Human prompt template
    ‚îú‚îÄ‚îÄ backup_prompts/
    ‚îÇ   ‚îî‚îÄ‚îÄ {Site Name}/
    ‚îÇ       ‚îú‚îÄ‚îÄ system_prompt.txt       # Backup c·ªßa system prompt
    ‚îÇ       ‚îú‚îÄ‚îÄ human_prompt.txt        # Backup c·ªßa human prompt
    ‚îÇ       ‚îî‚îÄ‚îÄ extract_sections.py     # Backup c·ªßa extract code
    ‚îú‚îÄ‚îÄ utils/
    ‚îÇ   ‚îî‚îÄ‚îÄ {Site Name}/
    ‚îÇ       ‚îî‚îÄ‚îÄ extract_sections.py     # Code ƒë·ªÉ extract k·∫øt qu·∫£ ƒë√°nh gi√°
    ‚îú‚îÄ‚îÄ test_results/
    ‚îÇ   ‚îî‚îÄ‚îÄ {Site Name}/
    ‚îÇ       ‚îú‚îÄ‚îÄ test_*.xlsx             # File k·∫øt qu·∫£ test
    ‚îÇ       ‚îú‚îÄ‚îÄ failed_tests.pkl        # Cache c√°c test th·∫•t b·∫°i
    ‚îÇ       ‚îî‚îÄ‚îÄ test_history.pkl        # L·ªãch s·ª≠ test
    ‚îî‚îÄ‚îÄ scheduled_tests/
        ‚îî‚îÄ‚îÄ {Site Name}/
            ‚îî‚îÄ‚îÄ *.xlsx                  # File test cho l·ªãch test t·ª± ƒë·ªông
    ```
    """)

with st.expander("üóëÔ∏è X√≥a site an to√†n", expanded=False):
    st.markdown("""
    **Tr∆∞·ªõc khi x√≥a site:**
    
    1. ‚úÖ Backup d·ªØ li·ªáu quan tr·ªçng (n·∫øu c·∫ßn)
    2. ‚úÖ Xem l·∫°i chi ti·∫øt site ƒë·ªÉ bi·∫øt s·∫Ω x√≥a g√¨
    3. ‚úÖ Tick v√†o "X√°c nh·∫≠n x√≥a"
    4. ‚úÖ Nh·∫•n n√∫t "‚ùå X√≥a Site"
    
    **L∆∞u √Ω:**
    - X√≥a site s·∫Ω x√≥a to√†n b·ªô d·ªØ li·ªáu li√™n quan
    - H√†nh ƒë·ªông n√†y **KH√îNG TH·ªÇ HO√ÄN T√ÅC**
    - Test results v√† backup c≈©ng s·∫Ω b·ªã x√≥a
    - N·∫øu site ƒëang c√≥ scheduled job, h√£y x√≥a job tr∆∞·ªõc
    """)

# Sidebar info
st.sidebar.subheader("üìä Th·ªëng k√™")
st.sidebar.metric("T·ªïng s·ªë sites", len(sites))

if sites:
    total_with_prompts = sum(1 for s in sites if get_site_info(s)["prompts_exist"])
    total_with_backup = sum(1 for s in sites if get_site_info(s)["backup_exist"])
    total_with_results = sum(1 for s in sites if get_site_info(s)["test_results_exist"])
    
    st.sidebar.metric("Sites c√≥ prompts", total_with_prompts)
    st.sidebar.metric("Sites c√≥ backup", total_with_backup)
    st.sidebar.metric("Sites c√≥ test results", total_with_results)
